import{_ as k,B as e,c as p,o as r,b3 as t,j as l,G as h,a as i,w as n}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/基础类型.md","filePath":"vue/typescript/基础类型.md","lastUpdated":1692608566000}'),d={name:"vue/typescript/基础类型.md"};function D(A,s,g,y,F,B){const a=e("font");return r(),p("div",null,[s[12]||(s[12]=t("",14)),l("p",null,[s[1]||(s[1]=i("这与下面定义 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[0]||(s[0]=[i("sentence",-1)])]),_:1}),s[2]||(s[2]=i(" 的方式效果相同：",-1))]),s[13]||(s[13]=t("",7)),l("p",null,[s[5]||(s[5]=i("元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[3]||(s[3]=[i("string",-1)])]),_:1}),s[6]||(s[6]=i(" 和 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[4]||(s[4]=[i("number",-1)])]),_:1}),s[7]||(s[7]=i(" 类型的元组。",-1))]),s[14]||(s[14]=t("",7)),h(a,{color:"red"},{default:n(()=>[...s[8]||(s[8]=[i("enum",-1)])]),_:1}),s[15]||(s[15]=t("",9)),l("p",null,[s[10]||(s[10]=i("有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[9]||(s[9]=[i("any",-1)])]),_:1}),s[11]||(s[11]=i(" 类型来标记这些变量：",-1))]),s[16]||(s[16]=t("",33))])}const E=k(d,[["render",D]]);export{c as __pageData,E as default};
