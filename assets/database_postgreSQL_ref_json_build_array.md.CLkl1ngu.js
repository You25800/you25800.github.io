import{_ as a,c as i,o as e,b3 as t}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"PostgreSQL json_build_array() 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/json_build_array.md","filePath":"database/postgreSQL/ref/json_build_array.md","lastUpdated":1690180485000}'),l={name:"database/postgreSQL/ref/json_build_array.md"};function n(o,s,h,r,d,p){return e(),i("div",null,[...s[0]||(s[0]=[t('<h1 id="postgresql-json-build-array-函数" tabindex="-1">PostgreSQL json_build_array() 函数 <a class="header-anchor" href="#postgresql-json-build-array-函数" aria-label="Permalink to &quot;PostgreSQL json\\_build\\_array() 函数&quot;">​</a></h1><p>PostgreSQL <code>json_build_array()</code> 函数从可变的参数列表中创建一个可能是异构类型的 JSON 数组并返回。</p><p>此函数与 <a href="./jsonb_build_object.html"><code>jsonb_build_array()</code></a> 函数类似。</p><h2 id="json-build-array-语法" tabindex="-1"><code>json_build_array()</code> 语法 <a class="header-anchor" href="#json-build-array-语法" aria-label="Permalink to &quot;`json_build_array()` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>json_build_array()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">json_build_array(VARIADIC any_value) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> JSON</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>any_value</code></em></p><p>必需的。 是一个可变的参数列表。您可以传入任意类型的任意数量的参数。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>json_build_array()</code> 函数返回一个可能是异构类型的 JSON 数组，其中的参数由可变的参数列表转换而来。</p><p><code>json_build_array()</code> 函数会评估可变参数列表中的每个参数，然后使用 <a href="./to_json.html"><code>to_json()</code></a> 将每个参数执行转为 JSON 值后放入最终返回的数组中。</p><h2 id="json-build-array-示例" tabindex="-1"><code>json_build_array()</code> 示例 <a class="header-anchor" href="#json-build-array-示例" aria-label="Permalink to &quot;`json_build_array()` 示例&quot;">​</a></h2><p>本示例展示了如何使用 PostgreSQL <code>json_build_array()</code> 函数构建一个 JSON 数组。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> json_build_array(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, true, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">row</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, false));</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">               json_build_array</span></span>\n<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">----------------------------------------------</span></span>\n<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> [</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">1, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">true</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">f1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">:2,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">f2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">f3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">false</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span></code></pre></div><p>这里，我们在函数中使用了 4 个参数: <code>1</code>, <code>&#39;a&#39;</code>, <code>true</code>, <code>row(2, &#39;b&#39;, false)</code>。</p><p>首先，<code>json_build_array()</code> 函数按照 <code>to_json()</code> 将每个参数转为 JSON 值：</p><ul><li><code>to_json(1)</code> 返回 <code>1</code></li><li><code>to_json(&#39;a&#39;::text)</code> 返回 <code>&quot;a&quot;</code></li><li><code>to_json(true)</code> 返回 <code>true</code></li><li><code>to_json(row(2, &#39;b&#39;, false))</code> 返回 <code>{&quot;f1&quot;:2,&quot;f2&quot;:&quot;b&quot;,&quot;f3&quot;:false}</code></li></ul><p>然后，<code>json_build_array()</code> 函数将上面的返回值组装成 JSON 数组 <code>[1, &quot;a&quot;, true, {&quot;f1&quot;:2,&quot;f2&quot;:&quot;b&quot;,&quot;f3&quot;:false}]</code> 后返回。</p>',19)])])}const u=a(l,[["render",n]]);export{c as __pageData,u as default};
