import{_ as s,c as a,o as e,b3 as t}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"GIT","description":"","frontmatter":{},"headers":[],"relativePath":"tool/git/README.md","filePath":"tool/git/README.md","lastUpdated":1724115510000}'),l={name:"tool/git/README.md"};function h(n,i,p,d,k,o){return e(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="git" tabindex="-1">GIT <a class="header-anchor" href="#git" aria-label="Permalink to &quot;GIT&quot;">​</a></h1><h2 id="安装配置" tabindex="-1">安装配置 <a class="header-anchor" href="#安装配置" aria-label="Permalink to &quot;安装配置&quot;">​</a></h2><p>Git 可以在 windows、mac、linux 全平台系统使用。登录 <a href="https://git-scm.com/" target="_blank" rel="noreferrer">https://git-scm.com/</a> 下载你系统的 Git 软件并进行安装。</p><p>安装后通过以下命令查看，显示版本号表示安装成功。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --version</span></span></code></pre></div><h3 id="图形界面管理软件" tabindex="-1">图形界面管理软件 <a class="header-anchor" href="#图形界面管理软件" aria-label="Permalink to &quot;图形界面管理软件&quot;">​</a></h3><p>推荐使用<code>sourcetree</code>，功能强大、跨平台、免费，下载地址 <a href="https://www.sourcetreeapp.com/" target="_blank" rel="noreferrer">https://www.sourcetreeapp.com/</a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>新人建议直接通使用命令行管理 GIT</p></div><h3 id="初始配置" tabindex="-1">初始配置 <a class="header-anchor" href="#初始配置" aria-label="Permalink to &quot;初始配置&quot;">​</a></h3><p>配置文件为<code>~/gitconfig</code>，执行任何 Git 配置命令后文件将自动创建。</p><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> config</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --global</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> user.email</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">thomas@163.com</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> config</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --global</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> user.name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">thomas</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span></code></pre></div><h2 id="基础入门" tabindex="-1">基础入门 <a class="header-anchor" href="#基础入门" aria-label="Permalink to &quot;基础入门&quot;">​</a></h2><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><ol><li>初始化新仓库 <code>git init</code></li><li>克隆代码 <code>git clone https://github.com/gorilla/websocket.git</code></li><li>克隆指定分支 <code>git clone -b dev git@github.com:gorilla/websocket.git</code></li><li>查看状态 <code>git status</code></li><li>提交单个文件 <code>git add main.go</code></li><li>提交所有文件 <code>git add -A</code></li><li>使用通配符提交 <code>git add *.js</code></li><li>提交到仓库中 <code>git commit -m &#39;提交信息&#39;</code></li><li>提交已经跟踪过的文件，不需要执行 add <code>git commit -a -m &#39;提交信息&#39;</code></li><li>删除版本库与项目目录中的文件 <code>git rm main.go</code></li><li>只删除版本库中文件但保存项目目录中文件 <code>git rm --cached main.go</code></li><li>修改最后一次提交 <code>git commit --amend</code></li></ol><h3 id="基础流程" tabindex="-1">基础流程 <a class="header-anchor" href="#基础流程" aria-label="Permalink to &quot;基础流程&quot;">​</a></h3><ol><li><p>首先克隆你的项目</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> clone</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> https://github.com/test/test.git</span></span></code></pre></div></li><li><p>创建新文件 main.go，查看没有被管理的文件</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> clean</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -n</span></span></code></pre></div></li><li><p>将所有文件提交到暂存区</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> add</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> .</span></span></code></pre></div></li><li><p>不小心将工作区中的 main.go 文件删除了，可以将暂存区中的 main.go 恢复回来</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> checkout</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> main.go</span></span></code></pre></div></li><li><p>将文件提交到本地仓库，并使用 -m 选项说明完成的工作</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> commit</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">完成。。。</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span></code></pre></div></li><li><p>将代码提交到远程服务器</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> push</span></span></code></pre></div></li></ol><h2 id="工作区" tabindex="-1">工作区 <a class="header-anchor" href="#工作区" aria-label="Permalink to &quot;工作区&quot;">​</a></h2><p>git clean 命令用来从工作目录中删除所有没有跟踪（tracked）过的文件</p><ol><li><code>git clean -n</code> 告诉你哪些文件没有被跟踪，会被删除。</li><li><code>git clean -f</code> 删除当前目录下没有 trached 过的文件，不会删除<code>.gitignore</code>指定的文件</li><li><code>git clean -df</code> 删除当前目录下没有被 tracked 过的文件和文件夹</li><li><code>git checkout .</code> 将没有放入暂存区的所有文件恢复</li><li><code>git checkout main.go</code> 放弃指定文件的修改</li><li><code>git checkout -- main.go</code> 将文件从暂存区恢复（如果没有提交到暂存区，将恢复到最近版本）</li></ol><h2 id="暂存区" tabindex="-1">暂存区 <a class="header-anchor" href="#暂存区" aria-label="Permalink to &quot;暂存区&quot;">​</a></h2><ol><li><code>git add .</code> 提交所有修改和新增的文件</li><li><code>git add -u</code> 只提交修改文件不提交新文件</li><li><code>git ls-files -s</code> 查看暂存区文件列表</li><li><code>git cat-file -p 6e9a94</code> 查看暂存区文件内容</li><li><code>git reset</code> 撤销上次提交到暂存区动作</li></ol><h2 id="日志查看" tabindex="-1">日志查看 <a class="header-anchor" href="#日志查看" aria-label="Permalink to &quot;日志查看&quot;">​</a></h2><ol><li><p><code>git log</code>查看日志</p></li><li><p><code>git log -p -2</code> 查看最近 2 次提交日志并显示文件差异</p></li><li><p><code>git log --name-only</code> 显示已修改的文件清单</p></li><li><p><code>git log --name-status</code> 显示新增、修改、删除的文件清单</p></li><li><p><code>git log --oneline</code> 一行显示并只显示 SHA-1 的前几个字符</p></li><li><p>下面是自定义的精简日志信息</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> log</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --graph</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --pretty=format:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --abbrev-commit</span></span></code></pre></div><p>可以在<code>～/.zshrc</code>配置文件中定义别名使用</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gitlog</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span></code></pre></div><p>运行结果：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> 7a9e5751 - (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">origin/master</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) 初始化vuepress仓库 (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">3</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> months</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> ago</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">thomas</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div></li></ol><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><p>分支用于为项目增加新功能或修复 Bug 时使用</p><h3 id="分支流程" tabindex="-1">分支流程 <a class="header-anchor" href="#分支流程" aria-label="Permalink to &quot;分支流程&quot;">​</a></h3><p>大部分情况下不会直接在 master 分支工作，我们应该保护这个分支是最终开发完成代码健康可交付运行的。</p><p>所以功能和缺陷（bug）修复都会新建分支完成，除了这个概念外与基本流程使用是一样的。</p><ol><li><p>新建支付功能开发分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> branch</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> pay</span></span></code></pre></div></li><li><p>切换到新分支开始开发，这里的工作内容与上面的基础流程是一样的</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> checkout</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> pay</span></span></code></pre></div></li><li><p>开发完成执行提交</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> commit</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">支付功能</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span></code></pre></div></li><li><p>合并分支到 master</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 切换到master分支</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> checkout</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> master</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 合并pay分支的代码</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> merge</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> pay</span></span></code></pre></div></li><li><p>提交代码到远程仓库 master 分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> push</span></span></code></pre></div></li></ol><h3 id="常用命令-1" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令-1" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><ol><li><p><code>git branch dev</code> 创建分支</p></li><li><p><code>git branch</code> 查看分支</p></li><li><p><code>git checkout dev</code> 切换分支</p></li><li><p><code>git checkout -b thomas</code> 创建并切换分支</p></li><li><p><code>git branch -m thomas main</code> 将分支 thomas 更新为 main</p></li><li><p>合并 dev 分支到 master</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> checkout</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> master</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> merge</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> dev</span></span></code></pre></div></li><li><p><code>git branch -d dev</code> 删除分支</p></li><li><p><code>git branch -D dev</code> 删除没有合并的分支</p></li><li><p><code>git push origin :dev</code> 删除远程分支</p></li><li><p><code>git branch --no-merged</code> 查看未合并的分支（切换到 master）</p></li><li><p><code>git branch --merged</code> 查看已经合并的分支（切换到 master）</p></li></ol><h3 id="历史版本" tabindex="-1">历史版本 <a class="header-anchor" href="#历史版本" aria-label="Permalink to &quot;历史版本&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 首先查看历史版本提交日志</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> log</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 切换到提交的commitId历史版本</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> checkout</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> a5a0d2012be8939bb3505f2c10062458d74d0bfc</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 以历史版本commitId创建新分支</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> checkout</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> a5a0d2012be8939bb3505f2c10062458d74d0bfc</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -b</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> 新分支名称</span></span></code></pre></div><h2 id="reset" tabindex="-1">reset <a class="header-anchor" href="#reset" aria-label="Permalink to &quot;reset&quot;">​</a></h2><p>使用 reset 恢复到历史提交点，重置暂存区与工作目录的内容。</p><h3 id="可选参数" tabindex="-1">可选参数 <a class="header-anchor" href="#可选参数" aria-label="Permalink to &quot;可选参数&quot;">​</a></h3><p>reset 有三个选项可使用</p><ol><li>--hard 重置位置的同时，直接将<strong>working Tree 工作目录</strong>、<strong>index 暂存区</strong>及 <strong>repository</strong> 都重置成目标 reset 的节点的内容。</li><li>--sort 重置位置的同时，保留<strong>working tree 工作目录</strong>和<strong>index 暂存区</strong>的内容，只让<strong>repository</strong>中的内容和<strong>reset</strong>目标节点保持一致。</li><li>--mixed（默认）重置位置的同时，只保留<strong>working tree 工作目录</strong>的内容，但会将<strong>index 暂存区</strong>和<strong>repository</strong>中的内容更改 reset 目标节点一致。</li></ol><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><ol><li><code>git reset</code>将 add 到暂存区的内容回退</li><li><code>git reset --hard b7545585454s4d554s45s4</code> 恢复到指定提交版本（先通过 git log 查看版本号），重置 stage 区和工作目录里的内容。</li><li><code>git reset --hard HEAD^^^</code>恢复前三个版本</li><li><code>git reset --soft</code> 保留工作区的内容，只回退 commit 的动作。保留 working tree 工作目录的内容，index 暂存区与 working tree 工作目录的内容一致，只是仓库 repository 中的内容的改变。</li><li><code>git reset HEAD -- .</code>撤销暂存区的文件。</li><li><code>git reset --hard</code>清空工作区和暂存区的改动。</li><li><code>git reset HEAD hd.js</code>放弃已经 add 暂存区的文件 hd.js</li></ol><h2 id="其他知识" tabindex="-1">其他知识 <a class="header-anchor" href="#其他知识" aria-label="Permalink to &quot;其他知识&quot;">​</a></h2><h3 id="定义别名" tabindex="-1">定义别名 <a class="header-anchor" href="#定义别名" aria-label="Permalink to &quot;定义别名&quot;">​</a></h3><p>通过创建命令别名可以减少命令输入量，有几种方式进行设置</p><h4 id="配置文件定义" tabindex="-1">配置文件定义 <a class="header-anchor" href="#配置文件定义" aria-label="Permalink to &quot;配置文件定义&quot;">​</a></h4><p>修改配置文件～/.gitconfig 并添加以下命令别名配置段</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">alias</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">	a</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> =</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> add</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> .</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">	c</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> =</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> commit</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">	s</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> =</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> status</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">	l</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> =</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> log</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">	b</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> =</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> branch</span></span></code></pre></div><p>现在可以使用<code>git a</code>实现<code>git add .</code>一样的效果了。</p><h4 id="系统配置定义" tabindex="-1">系统配置定义 <a class="header-anchor" href="#系统配置定义" aria-label="Permalink to &quot;系统配置定义&quot;">​</a></h4><p>window 用户可以修改<code>~/.bashrc</code>或<code>~/.bash_profile</code>文件。</p><p>mac/linux 修改 <code>~/.zshrc</code>文件中定义常用的别名指令，需要首先安装 zsh 命令行扩展</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git status</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gc</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git commit -m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gl</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gb</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git branch</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ga</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git add -A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> go</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git checkout</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git push;git push github</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span></code></pre></div><p>命令行直接使用<code>gs</code> 即可以实现<code>git status</code>一样的效果了。</p><blockquote><p>window 系统需要使用 git for window 中的<code>Git Base</code>软件</p></blockquote><h3 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h3><p>.gitignore 用于忽略提交的文件</p><ul><li>所有空行或者以注释符号<code>#</code>开头的行都会被 git 忽略</li><li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录</li><li>可以使用标准的 glob 模式匹配。</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">.idea</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">/vendor</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">.env</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.txt</span></span></code></pre></div><h3 id="冲突解决" tabindex="-1">冲突解决 <a class="header-anchor" href="#冲突解决" aria-label="Permalink to &quot;冲突解决&quot;">​</a></h3><p>不同分支修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交代码。</p><ol><li>使用编辑器修改冲突的文件</li><li>添加暂存<code>git add .</code>表示已经解决冲突</li><li>git commit 提交完成</li></ol><h3 id="stashing" tabindex="-1">Stashing <a class="header-anchor" href="#stashing" aria-label="Permalink to &quot;Stashing&quot;">​</a></h3><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则你以后无法回到这个工作点。</p><p>“暂存”可以获取你工作目录的中间状态----也就是你修改过的被追踪的文件和暂存的变更----并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p><ol><li>储藏工作 <code>git stash</code></li><li>查看储藏列表<code>git stash list</code></li><li>应用最近的储藏<code>git stash apply</code></li><li>应用更早的储藏<code>git stash apply stash@{2}</code></li><li>删除储藏<code>git stash dorp stash@{0}</code></li><li>应用并删除储藏 <code>git stash pop</code></li></ol><h3 id="tag" tabindex="-1">Tag <a class="header-anchor" href="#tag" aria-label="Permalink to &quot;Tag&quot;">​</a></h3><p>Git 也可以对某一时间点上的版本打上标签，用于发布软件版本如 v1.0</p><ol><li>添加标签<code>git tag v1.0</code></li><li>列出标签<code>git tag</code></li><li>推送标签<code>git push --tags</code></li><li>删除标签<code>git tag -d v1.0</code></li><li>删除远程标签<code>git push origin :v1.0</code></li></ol><h3 id="打包发布" tabindex="-1">打包发布 <a class="header-anchor" href="#打包发布" aria-label="Permalink to &quot;打包发布&quot;">​</a></h3><p>对 master 分支代码生成压缩包供使用者下载使用，<code>--prefix</code>指定目录名</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> archive</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> master</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --prefix=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">download/</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> --format=zip</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &gt;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> master.zip</span></span></code></pre></div><h2 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h2><h3 id="创建仓库" tabindex="-1">创建仓库 <a class="header-anchor" href="#创建仓库" aria-label="Permalink to &quot;创建仓库&quot;">​</a></h3><p>你需要在<code>Github</code>、码云等，先创建好仓库。</p><h3 id="ssh" tabindex="-1">SSH <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;SSH&quot;">​</a></h3><h4 id="生成密钥" tabindex="-1">生成密钥 <a class="header-anchor" href="#生成密钥" aria-label="Permalink to &quot;生成密钥&quot;">​</a></h4><p>使用 ssh 连接 Github 发送指令更加安全可靠，也可以免掉每次输入密码的困扰。</p><ol><li>在命令行中输入以下代码（windows 用户使用 Git Bash）</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>ssh-keygen -t rsa</span></span></code></pre></div><p>一直按回车键直到结束。系统会在<code>~/.ssh</code>目录中生成<code>id_rsa</code>和<code>id_rsa.pub</code>，即私钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。</p><ol start="2"><li><p>检查<code>~/.ssh</code>目录下是否有<code>config</code>文件，如果没有，就需要创建一个<code>config</code>文件(无后缀名)。</p><p>Mac创建<code>config</code></p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">touch</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> ~/.ssh/config</span></span></code></pre></div><p>​ 然后将下面代码粘帖至<code>~/.ssh/config</code>文件中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Host</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> *</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">HostkeyAlgorithms</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> +ssh-rsa</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">PubkeyAcceptedKeyTypes</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> +ssh-rsa</span></span></code></pre></div><ol start="3"><li>向 Github 等仓库，添加<code>id_rsa.pub</code>公钥内容。</li></ol><h3 id="关联远程" tabindex="-1">关联远程 <a class="header-anchor" href="#关联远程" aria-label="Permalink to &quot;关联远程&quot;">​</a></h3><ol><li><p>创建本地库并完成初始提交</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">echo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"># test</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &gt;&gt;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> init</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> add</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> README.md</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> commit</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">first commit</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span></code></pre></div></li><li><p>添加远程仓库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> remote</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> add</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> origin</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> git@github.com:mahongyi/test.git</span></span></code></pre></div></li><li><p>查看远程库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> remote</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -v</span></span></code></pre></div></li><li><p>推送数据到远程仓库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> push</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -u</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> origin</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> master</span></span></code></pre></div></li><li><p>删除远程仓库关联</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> remote</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> rm</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> origin</span></span></code></pre></div></li></ol><blockquote><p>通过 clone 克隆的仓库，本地与远程已经自动关联，上面几步都可以省略。</p></blockquote><h3 id="pull" tabindex="-1">pull <a class="header-anchor" href="#pull" aria-label="Permalink to &quot;pull&quot;">​</a></h3><p>拉取远程主机某个分支的更新，再与本地的指定分支合并。</p><ol><li>拉取 origin 主机的 ask 分支与本地的 master 分支合并 <code>git pull origin ask:ask</code></li><li>拉取 origin 主机的 ask 分支与当前分支合并 <code>git pull origin ask</code></li><li>如果远程分支与当前本地分支同名直接执行 <code>git pull</code></li></ol><h3 id="push" tabindex="-1">push <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push&quot;">​</a></h3><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相似。</p><ol><li><p>将当前分支推送到<code>origin</code>主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> push</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> origin</span></span></code></pre></div></li><li><p>使用<code>-u</code>选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用<code>git push</code>。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">$</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> push</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -u</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> origin</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> master</span></span></code></pre></div></li><li><p>删除远程<code>ask</code>分支 <code>git push origin --delete ask</code></p></li><li><p>本地 ask 分支关联远程分支并推送 <code>git push --set-upstream origin ask</code></p></li></ol><h3 id="多库提交" tabindex="-1">多库提交 <a class="header-anchor" href="#多库提交" aria-label="Permalink to &quot;多库提交&quot;">​</a></h3><p>可以将代码提交到多个远程版本库中，比如提交到了 Github 与 Gitee 两个库中。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 增加一个远程库</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> remote</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> add</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> github</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> git@github.com:mahongyi/test1.git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 提交到远程库</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">git</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> push</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> github</span></span></code></pre></div><p>也可以在<code>~/.zshrc</code> 文件中定义别名，下面是定义的别名。这时使用 gp 将同时提供到 github 与 gitee</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">alias</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> gp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">git push &amp; git push github</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span></code></pre></div>`,99)])])}const g=s(l,[["render",h]]);export{c as __pageData,g as default};
