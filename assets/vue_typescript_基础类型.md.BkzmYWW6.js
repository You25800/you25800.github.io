import{_ as k,B as e,c as p,o as r,b3 as t,j as l,G as h,a as i,w as n}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"基础类型","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/基础类型.md","filePath":"vue/typescript/基础类型.md","lastUpdated":1692608566000}'),d={name:"vue/typescript/基础类型.md"};function D(A,s,g,y,F,B){const a=e("font");return r(),p("div",null,[s[12]||(s[12]=t('<h1 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>为了让程序有价值，我们需要能够处理最简单的数据单元：数字、字符串、结构体、布乐值等。TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h2><p>最基本的数据类型就是简单的true/false值，在JavaScript和TypeScript里叫做boolean。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> isDone</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">boolean</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;"> false</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="数字" tabindex="-1">数字 <a class="header-anchor" href="#数字" aria-label="Permalink to &quot;数字&quot;">​</a></h2><p>和JavaScript一样，TypeScript里的所有数字都是浮点数，这些浮点类型是number。除了支持十进制和十六进制字面量，TypeScript还支持ECMAScript2015中引入的二进制和八进制字面量。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> decLiteral</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 6</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>\n<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> hexLiteral</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0xf00d</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>\n<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> binaryLiteral</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0b1010</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>\n<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> octalLiteral</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0o744</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h2><p>TypeScript程序的另一项基本操作是处理网页或服务器端的文本数据。像其它语言里一样，我们使用 string 表示文本数据类型。和JavaScript一样，可以使用双引号(&quot;)或 (&#39;)表示字符串。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bob</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>\n<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">smith</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>你还可以使用模板字符串，它可以定义多行文本和内嵌表达式。这种字符串是被反引号包围(`)，并且以I**${ expr }**这种形式嵌入表达式。</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> `</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Gene</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">`</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>\n<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> age</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 37</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>\n<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> sentenc</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> `</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, my name is </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">${</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> name </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">. </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">I&#39;ll be </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">${</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> age </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> years old next month.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">`</span></span></code></pre></div>',14)),l("p",null,[s[1]||(s[1]=i("这与下面定义 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[0]||(s[0]=[i("sentence",-1)])]),_:1}),s[2]||(s[2]=i(" 的方式效果相同：",-1))]),s[13]||(s[13]=t('<div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> sentence</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, my name is </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> name </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">I&#39;ll be </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (age </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> years old next month.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><p>TypeScript像JavaScript一样可以操作数组元素。有两种方式可以定义数组。第一种，可以在元素类型后面接上<code>[]</code>，表示由此类型元素组成的一个数组：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>第二种方式是使用数组泛型，Array&lt;元素类型&gt;：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Array</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="元组-tuple" tabindex="-1">元组 Tuple <a class="header-anchor" href="#元组-tuple" aria-label="Permalink to &quot;元组 Tuple&quot;">​</a></h2>',7)),l("p",null,[s[5]||(s[5]=i("元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。比如，你可以定义一对值分别为 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[3]||(s[3]=[i("string",-1)])]),_:1}),s[6]||(s[6]=i(" 和 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[4]||(s[4]=[i("number",-1)])]),_:1}),s[7]||(s[7]=i(" 类型的元组。",-1))]),s[14]||(s[14]=t(`<div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Declare a tuple type</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">number</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Initialize it</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // ok</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Initialize it incorrectly</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // ERROR</span></span></code></pre></div><p>当访问一个已知索引的元素，会得到正确的类型：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(x[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">substr</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(x[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">substr</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error, &#39;number&#39; does not have &#39;substr&#39;</span></span></code></pre></div><p>当访问一个越界的元素，会使用联合类型替代：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">world</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(x[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">toString</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // OK, &#39;string&#39; 和 &#39;number&#39; 都有 toString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">6</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // ERROR, 布尔不是(string|number)类型</span></span></code></pre></div><p>联合类型是高级主题，我们会在以后的章节里讨论它。</p><h2 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h2>`,7)),h(a,{color:"red"},{default:n(()=>[...s[8]||(s[8]=[i("enum",-1)])]),_:1}),s[15]||(s[15]=t(` 类型是对JavaScript标准数据类型的一个补充。像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。<div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Red</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Blue</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> c Color </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>默认情况下，从0开始为元素编号民。你也可以手动的指定成员的数值。例如，我们将上面的例子改成从1开始编号：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Red </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Blue</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> c</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>或者全部都采用手动赋值：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Red </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Green </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Blue </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> c</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>坆举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Red </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Blue</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> colorName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Color[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(colorName)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 显示‘Green’因为上面代码里它的值是2</span></span></code></pre></div><h2 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h2>`,9)),l("p",null,[s[10]||(s[10]=i("有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 ",-1)),h(a,{color:"red"},{default:n(()=>[...s[9]||(s[9]=[i("any",-1)])]),_:1}),s[11]||(s[11]=i(" 类型来标记这些变量：",-1))]),s[16]||(s[16]=t(`<div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> notSure</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">notSure </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">maybe a string instead</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">notSure </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;"> false</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // ok, definitely a boolean</span></span></code></pre></div><p>在对现有代码进行改写的时候，any 类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。你可能认为 Object 有相似的作用，就像它在其它语言中那样。但是 Object 类型的变量只是允许你给它赋任意值--但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> notSure</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">notSure</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">ifItExists</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // okay, ifItExists might exist at runtime</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">notSure</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">toFixed</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // okay, toFixed exists (but the compiler doesn&#39;t check)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> prettySure</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Object</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prettySure</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">toFixed</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error: Property &#39;toFixed&#39; doesn&#39;t exist on type &#39;Object&#39;.</span></span></code></pre></div><p>当你只知道一部分数据的类型时，any 类型也是有用的。比如，你有一个数组，它包含了不同的类型的数据：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">free</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">list[</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="void" tabindex="-1">void <a class="header-anchor" href="#void" aria-label="Permalink to &quot;void&quot;">​</a></h2><p>某种程度上来说，<code>void</code> 类型像是与 <code>any</code> 类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常能见到其返回值类型是 <code>void</code>：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> warnUser</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">This is my warning message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>声明一个<code>void</code>类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code> 和 <code>null</code>:</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> unusable</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> undefined;</span></span></code></pre></div><h2 id="null-和-undefined" tabindex="-1">null 和 undefined <a class="header-anchor" href="#null-和-undefined" aria-label="Permalink to &quot;null 和 undefined&quot;">​</a></h2><p>TypeScript里，<code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code>。和 <code>void</code> 相似，它们本身的类型用处不是很大：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Not much else we can assign to these variables!</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> u</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> undefined</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> undefined;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> null</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> null;</span></span></code></pre></div><p>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><p>然而，当你指定了 --strictNullChecks 标记， <code>null</code> 和 <code>undefined</code> 只能赋值给<code>void</code>和它们各自。这能避免很多常见的问题。也许在某处你想传入一个 <code>string</code> 或 <code>null</code> 或 <code>undefined</code>，你可以使用联合类型<code>string | null | undefined</code>。再次说明，稍后我们会介绍联合类型。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>我们鼓励尽可能地使用 --strictNullChecks，但在本手册里我们假设这个标记是关闭的。</p></div><h2 id="never" tabindex="-1">Never <a class="header-anchor" href="#never" aria-label="Permalink to &quot;Never&quot;">​</a></h2><p><code>never</code>类型表示的是那些永不存在的值的类型。例如，<code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型；变量也可能是<code>never</code>类型，当它们被永不为真的类型保护所约束时。</p><p><code>never</code> 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型或可以赋值给 <code>never</code> 类型（除了 <code>never</code> 本身之外）。即使 <code>any</code> 也不可以赋值给 <code>never</code>。</p><p>下面是一些返回 <code>never</code> 类型的函数：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 返回never的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> error</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">):</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> never</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  throw</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Error</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">message</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 推断的返回值类型为never</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> fail</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> error</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Something failed</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 返回never的函数必须存在无法达到的终点</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> infiniteLoop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> never</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  while</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;">true</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h2><p><code>object</code> 表示非原始类型，也就是除 <code>number, string , boolean, symbol, null, undefined </code> 之外的类型。</p><p>使用 <code>object</code> 类型， 就可以更好的表示像 <code>Object.create</code> 这样的API。例如：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> create</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">o</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> object</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> null</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">):</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">42</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;">false</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">create</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">undefined</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error</span></span></code></pre></div><h2 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h2><p>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响，只是在编译阶段起作用。TypeScript会假设你已经进行了必须的检查。</p><p>类型断言有两种形式。其一是“尖括号”语法：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> someValue</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">this is a string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> strLength</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">someValue).length;</span></span></code></pre></div><p>另一个为<code>as</code>语法：</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> someValue</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">this is a string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> strLength</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (someValue </span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">as</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">length</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>两种形式是等价的。至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有 <code>as</code> 语法断言是被允许的。</p>`,33))])}const E=k(d,[["render",D]]);export{c as __pageData,E as default};
