import{_ as a,c as i,o as e,b3 as n}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"PostgreSQL 用户自定义类型教程","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/dataType/用户自定义类型.md","filePath":"database/postgreSQL/dataType/用户自定义类型.md","lastUpdated":1689663255000}'),t={name:"database/postgreSQL/dataType/用户自定义类型.md"};function l(p,s,h,k,d,o){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="postgresql-用户自定义类型教程" tabindex="-1">PostgreSQL 用户自定义类型教程 <a class="header-anchor" href="#postgresql-用户自定义类型教程" aria-label="Permalink to &quot;PostgreSQL 用户自定义类型教程&quot;">​</a></h1><p>本文将讨论如何在 PostgreSQL 中如何使用用户自定义类型。</p><p>PostgreSQL 允许您使用 <code>CREATE DOMAIN</code> 和 <code>CREATE TYPE</code> 语句创建用户定义数据类型。</p><ul><li>使用 <code>CREATE DOMAIN</code> 您能基于已有的类型创建一个子类型，并可以为其添加一些约束，目前支持 3 中约束： <code>NULL</code>， <a href="/database/postgreSQL/databaseAndTable/NOT_NULL.html"><code>NOT NULL</code></a> ， <a href="/database/postgreSQL/databaseAndTable/CHECK约束.html"><code>CHECK</code></a>。</li><li>使用 <code>CREATE TYPE</code> 您能创建复合类型，枚举类型，或 <code>RANGE</code> 类型。</li></ul><h2 id="postgresql-create-domain-语法" tabindex="-1">PostgreSQL <code>CREATE DOMAIN</code> 语法 <a class="header-anchor" href="#postgresql-create-domain-语法" aria-label="Permalink to &quot;PostgreSQL \`CREATE DOMAIN\` 语法&quot;">​</a></h2><p>PostgreSQL <code>CREATE DOMAIN</code> 语句用于创建一个域。 域是具有可选约束的数据类型。</p><p>要基于一个现有的数据类型创建一个域，请按照如下语法使用 <code>CREATE DOMAIN</code> 语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> DOMAIN</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> name</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [ AS ] data_type</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ COLLATE collation ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ DEFAULT expression ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ { NOT NULL | NULL | CHECK (expression) } ]</span></span></code></pre></div><p>解释：</p><ul><li><p><em><code>name</code></em></p><p>要创建的域（子类型）的名称。</p></li><li><p><em><code>data_type</code></em></p><p>域的基础数据类型。</p></li><li><p><em><code>collation</code></em></p><p>域的排序规则，它是可选的。</p></li><li><p><em><code>DEFAULT expression</code></em></p><p>使用此数据类型的列的默认值。</p></li><li><p><em><code>CHECK (expression)</code></em></p><p>使用此数据类型的列的 <a href="/database/postgreSQL/databaseAndTable/CHECK约束.html"><code>CHECK</code></a>约束。</p></li></ul><p>比如，要创建一个默认值为空字符串且不能为 NULL 的 <a href="./字符类型.html"><code>TEXT</code></a> 类型 <code>not_null_text</code>，请使用以下语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> DOMAIN</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> not_null_text</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    AS</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> TEXT</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    DEFAULT</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">;</span></span></code></pre></div><p>下面的 <a href="/database/postgreSQL/databaseAndTable/创建表.html"><code>CREATE TABLE</code></a> 语句使用此 <code>not_null_text</code> 类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> test_domain</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  col1 not_null_text,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  col2 not_null_text</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><h2 id="postgresql-create-type" tabindex="-1">PostgreSQL <code>CREATE TYPE</code> <a class="header-anchor" href="#postgresql-create-type" aria-label="Permalink to &quot;PostgreSQL \`CREATE TYPE\`&quot;">​</a></h2><p>PostgreSQL <code>CREATE TYPE</code> 语句用于创建一个复合类型，枚举类型，或 <code>RANGE</code> 类型。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>以下语法使用 <code>CREATE DOMAIN</code> 语句用于创建一个复合类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> name</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  field_name1 data_type</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  [, field_name2 data_type, ...]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>以下语法使用 <code>CREATE DOMAIN</code> 语句用于创建一个枚举类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> name</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ENUM (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  label_1</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  [, label_2, ... ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>以下语法使用 <code>CREATE DOMAIN</code> 语句用于创建一个 <code>RANGE</code> 类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> name</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> AS</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> RANGE</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    SUBTYPE </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> subtype</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ , SUBTYPE_OPCLASS = subtype_operator_class ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ , COLLATION = collation ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ , CANONICAL = canonical_function ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ , SUBTYPE_DIFF = subtype_diff_function ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [ , MULTIRANGE_TYPE_NAME = multirange_type_name ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><h3 id="创建复合类型实例" tabindex="-1">创建复合类型实例 <a class="header-anchor" href="#创建复合类型实例" aria-label="Permalink to &quot;创建复合类型实例&quot;">​</a></h3><p>使用下面的语句创建一个自定义类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> address</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> as</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (country </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, city </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>上面的语句创建了一个名字为 <code>address</code> 自定义类型，它有两个字段： <code>country</code> 和 <code>city</code> 字段，他们都是 <code>TEXT</code> 类型。</p><p>下面的语句将一个复杂的 JSON 对象转为 SQL 行：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_to_record(</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;address&quot;: {&quot;country&quot;: &quot;CN&quot;, &quot;city&quot;: &quot;BeiJing&quot;}}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  ) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, age </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">address</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> address</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> age</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">   address</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">------+-----+--------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">  20</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">CN,BeiJing</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">1</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> row</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><h3 id="创建枚举类型实例" tabindex="-1">创建枚举类型实例 <a class="header-anchor" href="#创建枚举类型实例" aria-label="Permalink to &quot;创建枚举类型实例&quot;">​</a></h3><p>使用 <code>CREATE TYPE</code> 语句创建一个枚举类型 <code>my_color</code>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> my_color</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ENUM (</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">yellow</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">red</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">blue</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">green</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">white</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">black</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>sql使用 <a href="/database/postgreSQL_ref/enum_first.html">PostgreSQL <code>enum_first()</code> 函数</a>返回 <code>my_color</code> 中的第一个枚举值：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> enum_first(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">::my_color);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> enum_first</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> yellow</span></span></code></pre></div><p>使用 <a href="/database/postgreSQL_ref/enum_last.html">PostgreSQL <code>enum_last()</code> 函数</a>返回 <code>my_color</code> 中的最后一个枚举值：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> enum_last(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">::my_color);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> enum_last</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">-----------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> black</span></span></code></pre></div><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>PostgreSQL 允许您使用 <code>CREATE DOMAIN</code> 和 <code>CREATE TYPE</code> 语句创建用户定义数据类型。</p><p>使用 <code>CREATE DOMAIN</code> 您能基于已有的类型创建一个子类型，并可以为其添加 <code>NULL</code>， <code>NOT NULL</code>， 或 <code>CHECK</code> 约束。</p><p>使用 <code>CREATE TYPE</code> 您能创建复合类型，枚举类型，或 <code>RANGE</code> 类型。</p>`,43)])])}const A=a(t,[["render",l]]);export{c as __pageData,A as default};
