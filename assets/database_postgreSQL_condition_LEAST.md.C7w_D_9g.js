import{_ as a,c as i,o as e,b3 as s}from"./chunks/framework.CatkIGlB.js";const k=JSON.parse('{"title":"PostgreSQL LEAST 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/condition/LEAST.md","filePath":"database/postgreSQL/condition/LEAST.md","lastUpdated":1727682257000}'),d={name:"database/postgreSQL/condition/LEAST.md"};function l(n,t,o,r,h,c){return e(),i("div",null,[...t[0]||(t[0]=[s(`<h1 id="postgresql-least-函数" tabindex="-1">PostgreSQL LEAST 函数 <a class="header-anchor" href="#postgresql-least-函数" aria-label="Permalink to &quot;PostgreSQL LEAST 函数&quot;">​</a></h1><h2 id="一、函数介绍" tabindex="-1">一、函数介绍 <a class="header-anchor" href="#一、函数介绍" aria-label="Permalink to &quot;一、函数介绍&quot;">​</a></h2><p>在 PostgreSQL 中，LEAST 函数用于在给定的一组值中返回最小值。它与 GREATEST 函数相对应，同样可以处理多种数据类型，如数字、日期、字符串等，只要这些数据类型是可比较的。</p><h2 id="二、语法" tabindex="-1">二、语法 <a class="header-anchor" href="#二、语法" aria-label="Permalink to &quot;二、语法&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">LEAST</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(value1, value2, value3,...)</span></span></code></pre></div><ul><li><strong>参数解释</strong><ul><li><code>value1, value2, value3,...</code>：这是需要进行比较的值，可以是列名、常量或者表达式。这些值的数据类型必须是可比较的，例如不能随意混合数字和日期进行比较，除非进行了适当的类型转换。</li></ul></li><li><strong>函数工作原理</strong><ul><li>函数会从左到右依次比较这些参数的值。</li><li>比较结束后，返回这组值中的最小值。</li></ul></li></ul><h2 id="三、示例" tabindex="-1">三、示例 <a class="header-anchor" href="#三、示例" aria-label="Permalink to &quot;三、示例&quot;">​</a></h2><h3 id="一-数字类型" tabindex="-1">（一）数字类型 <a class="header-anchor" href="#一-数字类型" aria-label="Permalink to &quot;（一）数字类型&quot;">​</a></h3><ol><li><strong>简单价格比较</strong><ul><li>假设存在一个产品价格表<code>product_prices</code>，其中包含<code>price_1</code>、<code>price_2</code>和<code>price_3</code>三个列，分别表示产品在不同渠道的价格。现在要找出每个产品的最低价格。</li><li>相应的查询语句如下：</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> product_name,</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">       LEAST</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(price_1, price_2, price_3) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> lowest_price</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> product_prices;</span></span></code></pre></div><ul><li>例如，表中有如下数据：<table tabindex="0"><thead><tr><th>product_name</th><th>price_1</th><th>price_2</th><th>price_3</th></tr></thead><tbody><tr><td>Product A</td><td>10</td><td>12</td><td>8</td></tr><tr><td>Product B</td><td>15</td><td>13</td><td>14</td></tr><tr><td>Product C</td><td>20</td><td>18</td><td>19</td></tr></tbody></table></li><li>执行查询后的结果如下：<table tabindex="0"><thead><tr><th>product_name</th><th>lowest_price</th></tr></thead><tbody><tr><td>Product A</td><td>8</td></tr><tr><td>Product B</td><td>13</td></tr><tr><td>Product C</td><td>18</td></tr></tbody></table></li></ul></li><li><strong>结合计算表达式比较</strong><ul><li>考虑一个成本计算表<code>cost_calculation</code>，其中有<code>production_cost</code>（生产成本）、<code>transportation_cost</code>（运输成本）和<code>storage_cost</code>（存储成本）三个列。我们想要计算每个产品的最小综合成本，综合成本的计算公式为<code>total_cost_1 = production_cost + transportation_cost</code>和<code>total_cost_2 = production_cost + storage_cost</code>。</li><li>查询语句如下：</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> product_id,</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">       LEAST</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(production_cost </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> transportation_cost, production_cost </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> storage_cost) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> min_total_cost</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> cost_calculation;</span></span></code></pre></div><ul><li>通过这种方式，可以根据业务逻辑找到每个产品在不同成本计算方式下的最小成本。</li></ul></li></ol><h3 id="二-日期类型" tabindex="-1">（二）日期类型 <a class="header-anchor" href="#二-日期类型" aria-label="Permalink to &quot;（二）日期类型&quot;">​</a></h3><ol><li><strong>活动结束日期比较</strong><ul><li>假设有一个活动时间表<code>activity_schedule</code>，其中包含<code>end_date_1</code>、<code>end_date_2</code>和<code>end_date_3</code>三个列，表示不同活动阶段或者不同渠道记录的活动结束日期。我们想要找出每个活动的最早结束日期。</li><li>查询语句如下：</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> activity_name,</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">       LEAST</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(end_date_1, end_date_2, end_date_3) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> earliest_end_date</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> activity_schedule;</span></span></code></pre></div><ul><li>假设表中有如下数据：<table tabindex="0"><thead><tr><th>activity_name</th><th>end_date_1</th><th>end_date_2</th><th>end_date_3</th></tr></thead><tbody><tr><td>Sports Event</td><td>&#39;2023-06-01&#39;</td><td>&#39;2023-05-01&#39;</td><td>&#39;2023-04-01&#39;</td></tr><tr><td>Cultural Show</td><td>&#39;2023-07-01&#39;</td><td>&#39;2023-06-01&#39;</td><td>&#39;2023-08-01&#39;</td></tr><tr><td>Charity Drive</td><td>&#39;2023-09-01&#39;</td><td>&#39;2023-08-01&#39;</td><td>&#39;2023-10-01&#39;</td></tr></tbody></table></li><li>执行查询后的结果如下：<table tabindex="0"><thead><tr><th>activity_name</th><th>earliest_end_date</th></tr></thead><tbody><tr><td>Sports Event</td><td>&#39;2023-04-01&#39;</td></tr><tr><td>Cultural Show</td><td>&#39;2023-06-01&#39;</td></tr><tr><td>Charity Drive</td><td>&#39;2023-08-01&#39;</td></tr></tbody></table></li></ul></li></ol><h3 id="三-字符串类型" tabindex="-1">（三）字符串类型 <a class="header-anchor" href="#三-字符串类型" aria-label="Permalink to &quot;（三）字符串类型&quot;">​</a></h3><ol><li><strong>用户名字典序比较</strong><ul><li>假设有一个用户信息表<code>user_info</code>，其中包含<code>first_name_1</code>、<code>first_name_2</code>和<code>first_name_3</code>三个列，可能是用户在不同系统中的名字。我们想要按照字典序找出每个用户的最小（最先）名字。</li><li>查询语句如下：</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> user_id,</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">       LEAST</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(first_name_1, first_name_2, first_name_3) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> smallest_first_name</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> user_info;</span></span></code></pre></div><ul><li>假设表中有如下数据：<table tabindex="0"><thead><tr><th>user_id</th><th>first_name_1</th><th>first_name_2</th><th>first_name_3</th></tr></thead><tbody><tr><td>1</td><td>&quot;alice&quot;</td><td>&quot;bob&quot;</td><td>&quot;carol&quot;</td></tr><tr><td>2</td><td>&quot;david&quot;</td><td>&quot;emma&quot;</td><td>&quot;frank&quot;</td></tr><tr><td>3</td><td>&quot;gina&quot;</td><td>&quot;henry&quot;</td><td>&quot;iris&quot;</td></tr></tbody></table></li><li>在 PostgreSQL 中，字符串按照字典序进行比较。执行查询后的结果如下：<table tabindex="0"><thead><tr><th>user_id</th><th>smallest_first_name</th></tr></thead><tbody><tr><td>1</td><td>&quot;alice&quot;</td></tr><tr><td>2</td><td>&quot;david&quot;</td></tr><tr><td>3</td><td>&quot;gina&quot;</td></tr></tbody></table></li></ul></li></ol><h2 id="四、注意事项" tabindex="-1">四、注意事项 <a class="header-anchor" href="#四、注意事项" aria-label="Permalink to &quot;四、注意事项&quot;">​</a></h2><h3 id="一-数据类型" tabindex="-1">（一）数据类型 <a class="header-anchor" href="#一-数据类型" aria-label="Permalink to &quot;（一）数据类型&quot;">​</a></h3><ul><li>要确保参与比较的所有参数的数据类型是可比较的。如果数据类型不兼容，可能会导致错误或者不符合预期的结果。例如，尝试比较数字和无法转换为数字的字符串会出错。</li></ul><h3 id="二-null-值" tabindex="-1">（二）NULL 值 <a class="header-anchor" href="#二-null-值" aria-label="Permalink to &quot;（二）NULL 值&quot;">​</a></h3><ul><li>当参数中包含<code>NULL</code>值时，函数的行为需要注意。如果所有参数都是<code>NULL</code>，那么函数返回<code>NULL</code>。如果存在非<code>NULL</code>值，函数会忽略<code>NULL</code>值，从非<code>NULL</code>值中找出最小值。</li></ul><h3 id="三-性能" tabindex="-1">（三）性能 <a class="header-anchor" href="#三-性能" aria-label="Permalink to &quot;（三）性能&quot;">​</a></h3><ul><li>在处理大量数据时，频繁使用 LEAST 函数可能会对性能产生一定的影响。可以考虑在可能的情况下通过其他方式（如提前计算或者使用索引）来优化查询性能。</li></ul><h2 id="五、总结" tabindex="-1">五、总结 <a class="header-anchor" href="#五、总结" aria-label="Permalink to &quot;五、总结&quot;">​</a></h2><p>LEAST 函数是 PostgreSQL 中一个很有用的工具，用于在一组可比较的值中快速找到最小值。通过在数字、日期和字符串等多种数据类型的比较场景中的应用，可以帮助简化查询语句，有效地处理数据，为数据处理和分析提供便利。</p>`,22)])])}const u=a(d,[["render",l]]);export{k as __pageData,u as default};
