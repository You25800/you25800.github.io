import{_ as i,c as a,o as n,b3 as h}from"./chunks/framework.CatkIGlB.js";const A=JSON.parse('{"title":"枚举","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/枚举.md","filePath":"vue/typescript/枚举.md","lastUpdated":1692608566000}'),t={name:"vue/typescript/枚举.md"};function l(k,s,p,e,D,r){return n(),a("div",null,[...s[0]||(s[0]=[h(`<h1 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h1><p>使用枚举我们可以定义一皮带名字的常量。使用枚举可以清晰地表达意图或创建一组有区别的用例。TypeScript支持数字的和基于字符串的枚举。</p><h2 id="数字枚举" tabindex="-1">数字枚举 <a class="header-anchor" href="#数字枚举" aria-label="Permalink to &quot;数字枚举&quot;">​</a></h2><p>首先我们看看数字枚举，如果你使用过其它编程语言应该会很熟悉。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Up </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Down</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Right</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>如上，我们定义了一个数字枚举， <code>Up</code>使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， <code>Direction.Up</code>的值为 <code>1</code>， <code>Down</code>为 <code>2</code>， <code>Left</code>为 <code>3</code>， <code>Right</code>为 <code>4</code>。</p><p>我们还可以完全不使用初始化器：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Down</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Right</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>现在， <code>Up</code>的值为 <code>0</code>， <code>Down</code>的值为 <code>1</code>等等。 当我们不在乎成员的值的时候，这种自增长的行为是很有用处的，但是要注意每个枚举成员的值都是不同的。</p><p>使用枚举很简单：通过枚举的属性来访问枚举成员，和枚举的名字来访问枚举类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Response</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    No </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Yes </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> respond</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">recipient</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Response</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">):</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">respond</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Princess Caroline</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Response</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Yes)</span></span></code></pre></div><p>数字枚举可以混合在<a href="https://www.typescriptlang.org/docs/handbook/enums.html#computed-and-constant-members" target="_blank" rel="noreferrer">计算成员和常量成员中（见下文）</a>。简而言之，没有初始化器的枚举要么需要放在第一个，要么必须位于使用数字常量或其他常量枚举成员初始化的数字枚举之后。换句话说，以下行为是不允许的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    A </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> getSomeValue</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // error! &#39;A&#39; is not constant-initialized, so &#39;B&#39; needs an initializer</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="字符串枚举" tabindex="-1">字符串枚举 <a class="header-anchor" href="#字符串枚举" aria-label="Permalink to &quot;字符串枚举&quot;">​</a></h2><p>字符串枚举是一个类似的概念，但有一些微妙的<a href="https://www.typescriptlang.org/docs/handbook/enums.html#enums-at-runtime" target="_blank" rel="noreferrer">运行时差异</a>，如下所述。在字符串枚举中，每个成员都必须使用字符串文字或另一个字符串枚举成员进行常量初始化。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Up </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">UP</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Down </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">DOWN</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Left </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">LEFT</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Right </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">RIGHT</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>虽然字符串枚举没有自动递增行为，但字符串枚举的优点是它们可以很好地“序列化”。换句话说，如果您正在调试并且必须读取数字枚举的运行时值，则该值通常是不透明的 - 它本身并不能传达任何有用的含义（尽管反向映射通常可以提供帮助<a href="https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings" target="_blank" rel="noreferrer">）</a>。字符串枚举允许您在代码运行时给出有意义且可读的值，而与枚举成员本身的名称无关。</p><h2 id="异构枚举" tabindex="-1">异构枚举 <a class="header-anchor" href="#异构枚举" aria-label="Permalink to &quot;异构枚举&quot;">​</a></h2><p>从技术上讲，枚举可以与字符串和数字成员混合，但不清楚为什么要这样做：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> BooleanLikeHeterogeneousEnum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  No </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Yes </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">YES</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>除非您真的想以巧妙的方式利用 JavaScript 的运行时行为，否则建议您不要这样做。</p><h2 id="计算成员和常量成员" tabindex="-1">计算成员和常量成员 <a class="header-anchor" href="#计算成员和常量成员" aria-label="Permalink to &quot;计算成员和常量成员&quot;">​</a></h2><p>每个枚举成员都有一个与其关联的值，该值可以是<em>常量</em>或<em>计算</em>值。如果满足以下条件，则枚举成员被视为常量：</p><ul><li><p>它是枚举中的第一个成员，并且没有初始值设定项，在这种情况下，它会被分配以下值<code>0</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// E.X is constant:</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li><li><p>它没有初始值设定项，并且前面的枚举成员是<em>数字</em>常量。在这种情况下，当前枚举成员的值将是前一个枚举成员的值加一。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// All enum members in &#39;E1&#39; and &#39;E2&#39; are constant.</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Z</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  A </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  C</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li><li><p>枚举成员使用常量枚举表达式进行初始化。常量枚举表达式是 TypeScript 表达式的子集，可以在编译时完全求值。如果表达式满足以下条件，则该表达式是常量枚举表达式：</p><ol><li>文字枚举表达式（基本上是字符串文字或数字文字）</li><li>对先前定义的常量枚举成员的引用（可以源自不同的枚举）</li><li>带括号的常量枚举表达式</li><li>应用于常量枚举表达式的<code>+</code>, <code>-</code>,一元运算符之一<code>~</code></li><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>&amp;</code>, <code>|</code>,<code>^</code>以常量枚举表达式作为操作数的二元运算符</li></ol><p>将常量枚举表达式计算为<code>NaN</code>or是一个编译时错误<code>Infinity</code>。</p></li></ul><p>在所有其他情况下，枚举成员被视为计算的。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> FileAccess</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // constant members</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  None</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Read </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;&lt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Write </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;&lt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  ReadWrite </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Read </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">|</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Write</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // computed member</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  G </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">123</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">length</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="联合枚举和枚举成员类型" tabindex="-1">联合枚举和枚举成员类型 <a class="header-anchor" href="#联合枚举和枚举成员类型" aria-label="Permalink to &quot;联合枚举和枚举成员类型&quot;">​</a></h2><p>有一个不计算的常量枚举成员的特殊子集：文字枚举成员。文字枚举成员是没有初始化值的常量枚举成员，或者具有初始化为的值</p><ul><li>任何字符串文字（例如<code>&quot;foo&quot;</code>, <code>&quot;bar&quot;</code>, <code>&quot;baz&quot;</code>）</li><li>任何数字文字（例如<code>1</code>, <code>100</code>）</li><li>应用于任何数字文字的一元减号（例如<code>-1</code>, <code>-100</code>）</li></ul><p>当枚举中的所有成员都具有文字枚举值时，一些特殊的语义就会发挥作用。</p><p>首先，枚举成员也成为类型！例如，我们可以说某些成员只能<em>具有</em>枚举成员的值：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ShapeKind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Circle</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Square</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Circle</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  kind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ShapeKind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Circle</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  radius</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Square</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  kind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ShapeKind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Square</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  sideLength</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> c</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Circle</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  kind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ShapeKind</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Square</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Type </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">ShapeKind.Square</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> is not assignable to type </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">ShapeKind.Circle</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">.Type </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">ShapeKind.Square</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> is not assignable to type </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">ShapeKind.Circle</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">.</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  radius</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 100</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><p>另一个变化是枚举类型本身实际上成为每个枚举成员的<em>联合</em>。通过联合枚举，类型系统能够利用这样一个事实：它知道枚举本身存在的确切值集。因此，TypeScript 可以捕获我们可能错误地比较值的错误。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  if</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> !==</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ||</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> !==</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Bar</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">This</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> comparison</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> appears</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> to</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> be</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> unintentional</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> because</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> the</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> types</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">E.Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> and</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">E.Bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> have</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> no</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> overlap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">This</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> comparison</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> appears</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> to</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> be</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> unintentional</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> because</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> the</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> types</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">E.Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> and</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">E.Bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> have</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> no</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> overlap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    //</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在该示例中，我们首先检查<em>是否</em><code>x</code>不是。如果检查成功，那么我们的意志就会短路，“if”的主体就会运行。但是，如果检查没有成功，则只能<em>是</em>，因此查看它是否<em>不</em>等于是没有意义的。 <code>E.Foo\`\`||\`\`x\`\`E.Foo\`\`E.Bar</code></p><h2 id="运行时的枚举" tabindex="-1">运行时的枚举 <a class="header-anchor" href="#运行时的枚举" aria-label="Permalink to &quot;运行时的枚举&quot;">​</a></h2><p>枚举是运行时存在的真实对象。例如，以下枚举</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Z</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>实际上可以传递给函数</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Z</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">obj</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> })</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> obj</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Works, since &#39;E&#39; has a property named &#39;X&#39; which is a number.</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">f</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(E)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="编译时的枚举" tabindex="-1">编译时的枚举 <a class="header-anchor" href="#编译时的枚举" aria-label="Permalink to &quot;编译时的枚举&quot;">​</a></h2><p>尽管枚举是运行时存在的真实对象，但该<code>keyof</code>关键字的工作方式与您对典型对象的预期不同。相反，使用<code>keyof typeof</code>获取将所有 Enum 键表示为字符串的 Type。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> LogLevel</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  ERROR</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  WARN</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  INFO</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  DEBUG</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> * This is equivalent to:</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> * type LogLevelStrings = &#39;ERROR&#39; | &#39;WARN&#39; | &#39;INFO&#39; | &#39;DEBUG&#39;;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> LogLevelStrings</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> keyof</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> typeof</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> LogLevel</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> printImportant</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> LogLevelStrings</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> num</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> LogLevel</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">key</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  if</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">num</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> LogLevel</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">WARN</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Log level key is:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> key</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Log level value is:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> num</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Log level message is:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> message</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">printImportant</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">ERROR</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">This is a message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h3 id="反向映射" tabindex="-1">反向映射 <a class="header-anchor" href="#反向映射" aria-label="Permalink to &quot;反向映射&quot;">​</a></h3><p>除了创建具有成员属性名称的对象之外，数字枚举成员还获得从枚举值到枚举名称的<em>反向映射</em>。例如，在这个例子中：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> a </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> nameOfA </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Enum[a]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // &quot;A&quot;</span></span></code></pre></div><p>TypeScript 将其编译为以下 JavaScript：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">use strict</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    Enum</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Enum</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">[</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)(Enum </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">||</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (Enum </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> a </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> nameOfA </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Enum[a]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // &quot;A&quot;</span></span></code></pre></div><p>在此生成的代码中，枚举被编译为存储正向 ( <code>name</code>-&gt; <code>value</code>) 和反向 ( <code>value</code>-&gt; <code>name</code>) 映射的对象。对其他枚举成员的引用始终作为属性访问发出，并且从不内联。</p><p>请记住，字符串枚举成员<em>根本不会</em>生成反向映射。</p><h3 id="const枚举" tabindex="-1"><code>const</code>枚举 <a class="header-anchor" href="#const枚举" aria-label="Permalink to &quot;\`const\`枚举&quot;">​</a></h3><p>在大多数情况下，枚举是一个完全有效的解决方案。然而有时要求更严格。为了避免在访问枚举值时支付额外生成代码和额外间接的成本，可以使用<code>const</code>枚举。常量枚举是使用<code>const</code>枚举上的修饰符定义的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  A </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  B </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> A </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>常量枚举只能使用常量枚举表达式，并且与常规枚举不同，它们在编译期间被完全删除。常量枚举成员在使用站点内联。这是可能的，因为常量枚举不能有计算成员。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Down</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Right</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> directions </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Down</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Right</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>在生成的代码中将变成</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">use strict</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> directions </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    0</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> /* Direction.Up */</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    1</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> /* Direction.Down */</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    2</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> /* Direction.Left */</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    3</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> /* Direction.Right */</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h4 id="常量枚举陷阱" tabindex="-1">常量枚举陷阱 <a class="header-anchor" href="#常量枚举陷阱" aria-label="Permalink to &quot;常量枚举陷阱&quot;">​</a></h4><p>内联枚举值一开始很简单，但具有微妙的含义。这些陷阱仅与<em>环境</em>常量枚举（基本上是<code>.d.ts</code>文件中的常量枚举）以及在项目之间共享它们有关，但如果您正在发布或使用<code>.d.ts</code>文件，这些陷阱可能适用于您，因为将文件<code>tsc --declaration</code>转换<code>.ts</code>为<code>.d.ts</code>文件。</p><ol><li><a href="https://www.typescriptlang.org/tsconfig#references-to-const-enum-members" target="_blank" rel="noreferrer"><code>isolatedModules</code>由于文档</a>中列出的原因，该模式从根本上与环境常量枚举不兼容。这意味着如果您发布环境常量枚举，下游消费者将无法<a href="https://www.typescriptlang.org/tsconfig#isolatedModules" target="_blank" rel="noreferrer"><code>isolatedModules</code></a>同时使用这些枚举值。</li><li>您可以在编译时轻松内联依赖项版本 A 中的值，并在运行时导入版本 B。如果您不太小心，版本 A 和 B 的枚举可以具有不同的值，从而导致<a href="https://github.com/microsoft/TypeScript/issues/5219#issue-110947903" target="_blank" rel="noreferrer">令人惊讶的错误</a>，例如采用错误的<code>if</code>语句分支。这些错误特别有害，因为通常在构建项目的同时运行自动化测试，并使用相同的依赖项版本，从而完全忽略了这些错误。</li><li><a href="https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues" target="_blank" rel="noreferrer"><code>importsNotUsedAsValues: &quot;preserve&quot;</code></a>不会删除用作值的 const 枚举的导入，但环境 const 枚举不保证运行时<code>.js</code>文件存在。无法解析的导入会在运行时导致错误。目前，明确消除导入的常用方法（<a href="https://www.typescriptlang.org/docs/handbook/modules.html#importing-types" target="_blank" rel="noreferrer">仅类型导入）</a>不允许<a href="https://github.com/microsoft/TypeScript/issues/40344" target="_blank" rel="noreferrer">const enum 值</a>。</li></ol><p>以下是避免这些陷阱的两种方法：</p><ol><li><p>根本不要使用常量枚举。您可以借助 linter轻松<a href="https://typescript-eslint.io/linting/troubleshooting#how-can-i-ban-specific-language-feature" target="_blank" rel="noreferrer">禁止常量枚举。</a>显然，这避免了 const 枚举的任何问题，但会阻止您的项目内联自己的枚举。与内联其他项目的枚举不同，内联项目自己的枚举不会出现问题，并且会影响性能。</p></li><li><p>不要发布环境常量枚举，通过在<a href="https://www.typescriptlang.org/tsconfig#preserveConstEnums" target="_blank" rel="noreferrer"><code>preserveConstEnums</code></a>. <a href="https://github.com/microsoft/TypeScript/pull/5422" target="_blank" rel="noreferrer">这是TypeScript 项目本身</a>内部采用的方法。 <a href="https://www.typescriptlang.org/tsconfig#preserveConstEnums" target="_blank" rel="noreferrer"><code>preserveConstEnums</code></a>const 枚举与普通枚举发出相同的 JavaScript。然后，您可以<a href="https://github.com/microsoft/TypeScript/blob/1a981d1df1810c868a66b3828497f049a944951c/Gulpfile.js#L144" target="_blank" rel="noreferrer">在构建步骤中</a><code>const</code>安全地从<code>.d.ts</code>文件中删除修饰符。</p><p>这样下游消费者就不会从您的项目中内联枚举，从而避免了上述陷阱，但项目仍然可以内联自己的枚举，这与完全禁止 const 枚举不同。</p></li></ol><h2 id="环境枚举" tabindex="-1">环境枚举 <a class="header-anchor" href="#环境枚举" aria-label="Permalink to &quot;环境枚举&quot;">​</a></h2><p>环境枚举用于描述已经存在的枚举类型的形状。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Enum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  A </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  C </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>环境枚举和非环境枚举之间的一个重要区别是，在常规枚举中，如果其前面的枚举成员被视为常量，则没有初始值设定项的成员将被视为常量。相比之下，没有初始化器的环境（和非常量）枚举成员<em>始终</em>被视为计算的。</p><h2 id="对象与枚举" tabindex="-1">对象与枚举 <a class="header-anchor" href="#对象与枚举" aria-label="Permalink to &quot;对象与枚举&quot;">​</a></h2><p><code>as const</code>在现代 TypeScript 中，当一个对象就足够时，您可能不需要枚举：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> enum</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> EDirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Down</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Right</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ODirection </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  Down</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  Left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  Right</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> as</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> const</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">EDirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">           </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(enum member) EDirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Up </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ODirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">           </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(property) </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Up</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Using the enum as a parameter</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> walk</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">dir</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> EDirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// It requires an extra line to pull out the values</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> typeof</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ODirection[keyof </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">typeof</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ODirection]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> run</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">dir</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Direction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">walk</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(EDirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Left)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">run</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(ODirection</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Right)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>与 TypeScript 相比，支持这种格式的最大论据<code>enum</code>是，它使您的代码库与 JavaScript 的状态保持一致，并且<a href="https://github.com/rbuckton/proposal-enum" target="_blank" rel="noreferrer">当/如果</a>将枚举添加到 JavaScript 时，您可以转向附加语法。</p>`,70)])])}const g=i(t,[["render",l]]);export{A as __pageData,g as default};
