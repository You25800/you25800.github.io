import{_ as i,c as a,o as t,b3 as e}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"PostgreSQL json_to_record() 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/json_to_record.md","filePath":"database/postgreSQL/ref/json_to_record.md","lastUpdated":1690180485000}'),n={name:"database/postgreSQL/ref/json_to_record.md"};function h(l,s,p,k,o,r){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="postgresql-json-to-record-函数" tabindex="-1">PostgreSQL json_to_record() 函数 <a class="header-anchor" href="#postgresql-json-to-record-函数" aria-label="Permalink to &quot;PostgreSQL json\\_to\\_record() 函数&quot;">​</a></h1><p>PostgreSQL <code>json_to_record()</code> 函数将指定的最顶层的 JSON 对象扩展为一个在 AS 子句中定义的具有符合类型的行。</p><h2 id="json-to-record-语法" tabindex="-1"><code>json_to_record()</code> 语法 <a class="header-anchor" href="#json-to-record-语法" aria-label="Permalink to &quot;\`json_to_record()\` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>json_to_record()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">json_to_record(from_json </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">JSON</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> RECORD</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>from_json</code></em></p><p>必需的。 要转的 JSON 对象。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>json_to_record()</code> 函数返回一个在 AS 子句中定义的 <code>RECORD</code> 类型值，它由指定的 JSON 对象转换而来。 JSON 对象都依照 <a href="./json_to_record.html"><code>json_populate_record()</code></a> 函数被转成 RECORD 类型的值。</p><h2 id="json-to-record-示例" tabindex="-1"><code>json_to_record()</code> 示例 <a class="header-anchor" href="#json-to-record-示例" aria-label="Permalink to &quot;\`json_to_record()\` 示例&quot;">​</a></h2><p>本示例展示了如何使用 PostgreSQL <code>json_to_record()</code> 函数将一个 JSON 对象转为一个具有复杂类型的行。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_to_record(</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;hobbies&quot;: [&quot;sports&quot;, &quot;cars&quot;]}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  ) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, age </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, hobbies </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[]);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> age</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">    hobbies</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">------+-----+---------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">  20</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> {</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">sports,cars}</span></span></code></pre></div><p>这里，我们在 <code>AS</code> 子句中定义了要返回的行类型: <code>AS x(name TEXT, age INT, hobbies TEXT[])</code>。</p><p>您还可以结合自定义的类型使用更复杂的类型。</p><p>首先，让我们创建一个自定义的 SQL 类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> address</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> as</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (country </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, city </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>然后将一个更复杂的 JSON 对象转为行：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_to_record(</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;hobbies&quot;: [&quot;sports&quot;, &quot;cars&quot;], &quot;address&quot;: {&quot;country&quot;: &quot;CN&quot;, &quot;city&quot;: &quot;BeiJing&quot;}}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  ) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, age </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, hobbies </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[], </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">address</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> address</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> age</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">    hobbies</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">   address</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">------+-----+---------------+--------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">  20</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> {</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">sports,cars}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">CN,BeiJing</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div>`,20)])])}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
