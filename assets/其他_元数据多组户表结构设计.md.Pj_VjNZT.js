import{_ as a,c as e,o as d,b3 as n}from"./chunks/framework.CatkIGlB.js";const l=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"其他/元数据多组户表结构设计.md","filePath":"其他/元数据多组户表结构设计.md","lastUpdated":1710384876000}'),r={name:"其他/元数据多组户表结构设计.md"};function _(p,t,h,i,o,s){return d(),e("div",null,[...t[0]||(t[0]=[n('<h2 id="定义租户并建表" tabindex="-1">定义租户并建表 <a class="header-anchor" href="#定义租户并建表" aria-label="Permalink to &quot;定义租户并建表&quot;">​</a></h2><p>t_tenant_base</p><p>t_tenant_extend</p><h2 id="定义领域模型-ddd建模-然后建表" tabindex="-1">定义领域模型（DDD建模）然后建表 <a class="header-anchor" href="#定义领域模型-ddd建模-然后建表" aria-label="Permalink to &quot;定义领域模型（DDD建模）然后建表&quot;">​</a></h2><p>用来做数据存储</p><p>领域模型都是跟表绑定的</p><p>其中租户也是一种领域模型</p><p>比如：异常，风险、订单、用户、商品、评论</p><p>建表：行存储+列存储</p><p>t_exception_base t_exception_extend</p><p>t_product_base t_product_extend</p><p>其中base表是基础表，是行表</p><p>extend表是扩展表，是列表</p><p>比如异常</p><p>name base_table extend_table</p><p>exception t_exception_base t_exception_extend</p><h2 id="定义租户领域映射表" tabindex="-1">定义租户领域映射表 <a class="header-anchor" href="#定义租户领域映射表" aria-label="Permalink to &quot;定义租户领域映射表&quot;">​</a></h2><p>t_tenant_domain_mapping</p><p>一个租户可能需要不同的领域模型，多对多关系</p><p>比如有些租户需要用户表，商品表，有些不需要</p><h2 id="多数据源-建立数据源表-然后建立租户数据源映射" tabindex="-1">多数据源，建立数据源表，然后建立租户数据源映射 <a class="header-anchor" href="#多数据源-建立数据源表-然后建立租户数据源映射" aria-label="Permalink to &quot;多数据源，建立数据源表，然后建立租户数据源映射&quot;">​</a></h2><p>t_datasource_base</p><p>t_tenant_datasource_mapping</p><p>不同的租户可能使用不同的数据源</p><p>同一个租户分库分表的情况下也需要定义多个数据源</p><p>同一个租户不同的领域模型也可能需要不同的数据源</p><p>比如product和user会使用不同的数据源</p><h2 id="南北向元数据-定义用户侧元数据-领域模型元数据-t-metadata-4-user" tabindex="-1">南北向元数据，定义用户侧元数据，领域模型元数据（t_metadata_4_user） <a class="header-anchor" href="#南北向元数据-定义用户侧元数据-领域模型元数据-t-metadata-4-user" aria-label="Permalink to &quot;南北向元数据，定义用户侧元数据，领域模型元数据（t\\_metadata\\_4\\_user）&quot;">​</a></h2><p>比如：新建了租户表，租户扩展表</p><p>租户A和租户A登录，注册时候，需要填写的信息可能不同，验证规则可能不同</p><p>就需要定义租户的元数据</p><table tabindex="0"><thead><tr><th>租户：tenant_name</th><th>名称：name</th><th>字段:field</th><th>表名:table</th><th>中文名:cnName</th><th>试图</th><th>规则</th></tr></thead><tbody><tr><td>tenantA</td><td>name</td><td>name</td><td>t_tenant_base</td><td>用户名</td><td><input></td><td>8-30位</td></tr><tr><td>tenantA</td><td>password</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>tenantA</td><td>phone</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>tenantA</td><td>idCard</td><td>id_card</td><td>t_tenant_extend</td><td>身份证</td><td></td><td></td></tr></tbody></table><p>比如商品表</p><table tabindex="0"><thead><tr><th>租户：tenant_name</th><th>名称：name</th><th>字段:field</th><th>表名:table</th><th>中文名:cnName</th><th>试图</th><th>规则</th></tr></thead><tbody><tr><td>tenantB</td><td>name</td><td>name</td><td>t_product_base</td><td>商品名</td><td><input></td><td>1-30位</td></tr><tr><td>tenantB</td><td>price</td><td>price</td><td>t_product_base</td><td>价格</td><td>样式:#000000</td><td>9.1-9.5号打5折</td></tr><tr><td>tenantB</td><td>skuid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>tenantB</td><td>5GProp</td><td>5g_prop</td><td>t_product_extend</td><td>5G属性</td><td></td><td></td></tr></tbody></table><h2 id="创建上游系统-下游系统" tabindex="-1">创建上游系统，下游系统 <a class="header-anchor" href="#创建上游系统-下游系统" aria-label="Permalink to &quot;创建上游系统，下游系统&quot;">​</a></h2><p>t_system_base</p><p>stream表示是上游系统，还是下游系统，上下游系统合并成了一张表</p><p>比如：</p><p>创建支付收单的上游系统</p><table tabindex="0"><thead><tr><th>name</th><th>stream</th><th>integerate_method</th><th>domain_id</th><th>domain_name</th><th>domain_base_table</th></tr></thead><tbody><tr><td>jdp</td><td>ustream</td><td>api</td><td>1</td><td>PayOrder</td><td>t_pay_order</td></tr></tbody></table><p>创建支付收单的下游系统</p><table tabindex="0"><thead><tr><th>name</th><th>stream</th><th>integerate_method</th><th>domain_id</th><th>domain_name</th><th>domain_base_table</th></tr></thead><tbody><tr><td>icbcP</td><td>downstream</td><td>api</td><td>1</td><td>PayOrder</td><td>t_pay_order</td></tr></tbody></table><h2 id="上下游系统映射表t-system-mapping" tabindex="-1">上下游系统映射表t_system_mapping <a class="header-anchor" href="#上下游系统映射表t-system-mapping" aria-label="Permalink to &quot;上下游系统映射表t\\_system\\_mapping&quot;">​</a></h2><h2 id="东本向元数据-系统数据配置-t-metadata-4-system-也叫应用侧元数据配置" tabindex="-1">东本向元数据，系统数据配置（t_metadata_4_system） ,也叫应用侧元数据配置 <a class="header-anchor" href="#东本向元数据-系统数据配置-t-metadata-4-system-也叫应用侧元数据配置" aria-label="Permalink to &quot;东本向元数据，系统数据配置（t\\_metadata\\_4\\_system）	,也叫应用侧元数据配置&quot;">​</a></h2><p>上游元数据配置</p><table tabindex="0"><thead><tr><th>tenant_base_name</th><th>system_base_name</th><th>stream</th><th>domain_name</th><th>upstream_name</th><th>midstream_name</th><th>midstream_field</th><th>midstream_table</th></tr></thead><tbody><tr><td>jd</td><td>jdP</td><td>upstream</td><td>PayOrder</td><td>jdAmount</td><td>amount</td><td>amount</td><td>t_pay_order</td></tr></tbody></table><p>下游元数据配置</p><h2 id="页面元数据、组件元数据" tabindex="-1">页面元数据、组件元数据 <a class="header-anchor" href="#页面元数据、组件元数据" aria-label="Permalink to &quot;页面元数据、组件元数据&quot;">​</a></h2><p>t_view_base</p><p>租户级别的，跟路由绑定的</p><p>比如同一个页面，有的页面要求有评论，有的不要求</p><p>比如在同下一个页面里面，上下两个组件，对同一个字段的要求都不一样</p><p>比如上面一个搜索框，需要4个搜索字段</p><p>下面是明细表格，显示20多个字段</p><p>就需要根据组件去配置元数据</p><p>配置元数据，有租户级别的，有系统级别的，有页面级别的，有组件级别的</p><h2 id="配置页面视图表t-metadata-view-base" tabindex="-1">配置页面视图表t_metadata_view_base <a class="header-anchor" href="#配置页面视图表t-metadata-view-base" aria-label="Permalink to &quot;配置页面视图表t\\_metadata\\_view\\_base&quot;">​</a></h2><p>配置在哪个平台，什么样式，用什么组件，有哪些properties</p><h2 id="规则元数据也叫计算元数据" tabindex="-1">规则元数据也叫计算元数据 <a class="header-anchor" href="#规则元数据也叫计算元数据" aria-label="Permalink to &quot;规则元数据也叫计算元数据&quot;">​</a></h2><p>那是跟领域模型相关的，跟领域字段相关的</p><p>不同的租户不同的规则</p><p>比如注册页面，有的租户要求用户注册用户名是6-30位，有的要求8-20位</p><p>有的价格，不同租户打折规则不一样</p><p>使用规则引擎，每个租户一个规则文件</p><p>比如使用drools，每个租户一个，后面改成从数据库读取，规则可视化</p><h2 id="元数据字典表" tabindex="-1">元数据字典表 <a class="header-anchor" href="#元数据字典表" aria-label="Permalink to &quot;元数据字典表&quot;">​</a></h2><p>可以支持 ：枚举，下拉选择，级连选择，单选，正则表达式等</p><h2 id="表示例" tabindex="-1">表示例 <a class="header-anchor" href="#表示例" aria-label="Permalink to &quot;表示例&quot;">​</a></h2><p>t_datasource_base t_datasource_extand t_domain t_metadata_4_system t_metadata_4_user t_metadata_dictionary</p><p>t_metadata_view_base t_metadata_view_extend t_system_base t_system_extend t_system_mapping</p><p>t_tenant_base t_tenant_datasource_mapping t_tenant_domain_mapping t_tenant_extend</p><p>t_view_base t_view_extend</p><h2 id="详细设计" tabindex="-1">详细设计 <a class="header-anchor" href="#详细设计" aria-label="Permalink to &quot;详细设计&quot;">​</a></h2><h3 id="t-domain-领域模型" tabindex="-1">t_domain 领域模型 <a class="header-anchor" href="#t-domain-领域模型" aria-label="Permalink to &quot;t\\_domain 领域模型&quot;">​</a></h3><p>id，parent_id,brother_id, shadow_id, name, cnname, display_name, base_table, extend_table, logo, icon, theme, owner, status, type, level, remark, desciption</p><h3 id="t-tenant-datasource-mapping-租户数据源映射表" tabindex="-1">t_tenant_datasource_mapping 租户数据源映射表 <a class="header-anchor" href="#t-tenant-datasource-mapping-租户数据源映射表" aria-label="Permalink to &quot;t\\_tenant\\_datasource\\_mapping 租户数据源映射表&quot;">​</a></h3><p>id，tenant_base_name,tenant_base_cnname, domain_id, domain_name, domain_cnname, datasource_id, datasource_name, datasource_cnname, status, weight, creator</p><h3 id="t-metadata-4-system" tabindex="-1">t_metadata_4_system <a class="header-anchor" href="#t-metadata-4-system" aria-label="Permalink to &quot;t\\_metadata\\_4\\_system&quot;">​</a></h3>',78)])])}const b=a(r,[["render",_]]);export{l as __pageData,b as default};
