import{_ as e,c as a,o as i,b3 as t}from"./chunks/framework.CatkIGlB.js";const k=JSON.parse('{"title":"PostgreSQL TRUNCATE TABLE 清空表","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/base/清空表.md","filePath":"database/postgreSQL/base/清空表.md","lastUpdated":1690289709000}'),l={name:"database/postgreSQL/base/清空表.md"};function n(p,s,h,d,o,c){return i(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="postgresql-truncate-table-清空表" tabindex="-1">PostgreSQL TRUNCATE TABLE 清空表 <a class="header-anchor" href="#postgresql-truncate-table-清空表" aria-label="Permalink to &quot;PostgreSQL TRUNCATE TABLE 清空表&quot;">​</a></h1><p>在本文中，我们介绍了在 PostgreSQL 服务器上如何使用 <code>TRUNCATE TABLE</code> 语句清空一个或多个表。</p><p>当我们需要清空一个表中的所有行时，除了使用 <code>DELETE * FROM table</code> 还可以使用 <code>TRUNCATE TABLE</code> 语句。</p><p><code>TRUNCATE</code> 语句和不带任何条件的 <a href="/database/postgreSQL/base/DELETE.html"><code>DELETE</code></a> 语句的效果相同。但是 <code>TRUNCATE</code> 速度更快，因为它不扫描表。并且，<code>TRUNCATE</code> 会立即回收磁盘空间。 <code>TRUNCATE</code> 在清空大表时很有用。</p><h2 id="postgresql-truncate-语法" tabindex="-1">PostgreSQL <code>TRUNCATE</code> 语法 <a class="header-anchor" href="#postgresql-truncate-语法" aria-label="Permalink to &quot;PostgreSQL \`TRUNCATE\` 语法&quot;">​</a></h2><p>要清空一个或者多个表中的所有的行，请按照以下语法使用使用 <code>TRUNCATE</code> 语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">TRUNCATE</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [TABLE] [ONLY] table_name [ * ] [, ... ]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    [RESTART IDENTITY | CONTINUE IDENTITY] [ CASCADE | RESTRICT ]</span></span></code></pre></div><p>解释说明：</p><ul><li><code>TABLE</code> 关键字是可选的。</li><li><code>ONLY</code> 关键字是可选的。如果在表名前指定了 <code>ONLY</code>，则只清空此表，不包含它的子表。否则，此表和它的子表都将被清空。</li><li><code>table_name</code> 是要清空的表的名字。 表名后的 <code>*</code> 明确的指示子表也将被清空。</li><li>您可以在一个 <code>TRUNCATE</code> 语句中清空多个表。 多个表名使用逗号分隔。</li><li><code>RESTART IDENTITY</code> 选项指示自动重置表中的列拥有的序列。 <code>CONTINUE IDENTITY</code> 选项指示不改变表中的序列的值，它是默认的。</li><li><code>CASCADE</code> 选项指示同时清空那些通过外键引用 <code>table_name</code> 的表。 <code>RESTRICT</code> 选项指示如果有外键引用要清空的表，则拒绝操作。</li></ul><h2 id="postgresql-truncate-实例" tabindex="-1">PostgreSQL <code>TRUNCATE</code> 实例 <a class="header-anchor" href="#postgresql-truncate-实例" aria-label="Permalink to &quot;PostgreSQL \`TRUNCATE\` 实例&quot;">​</a></h2><p>我们通过以下实例比较 <code>TRUNCATE</code> 和 <code>DELETE</code> 在清空一个表的效率。</p><p>首先，我们使用下面的语句创建一个 <code>test_truncate</code> 表用于测试：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> test_truncate</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  v </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INTEGER</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>然后，使用下面的 sql 语句<a href="/database/postgreSQL/databaseAndTable/INSERT.html">插入</a> 1000 万条数据：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_truncate (v)</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> generate_series</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">10000000</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) v;</span></span></code></pre></div><p>为了观察查询语句消耗的时间，请先使用下面的命令打开计时：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\timing</span></span></code></pre></div><p>通过以下 <code>DELETE</code> 语句删除表中的所有行:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">DELETE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_truncate;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">DELETE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10000000</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Time:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 6566.458</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> ms</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (00:06.566)</span></span></code></pre></div><p>上面是 <code>DELETE</code> 语句的返回结果。它显示了从表中删除 <strong>10000000</strong> 行，总共耗费 <strong>6566.458</strong> 毫秒。</p><p>再使用上面的 <code>INSERT</code> 语句重新插入 1000 万行后，通过以下 <code>TRUNCATE TABLE</code> 语句清空表：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">TRUNCATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_truncate;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">TRUNCATE</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> TABLE</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Time:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 31.785</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> ms</span></span></code></pre></div><p>上面是 <code>TRUNCATE TABLE</code> 语句的返回结果。它显示了清空此表共耗费 <strong>31.785</strong> 毫秒。所以 <code>TRUNCATE</code> 比 <code>DELETE</code> 快的多。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>在本文中，我们介绍了在 PostgreSQL 中如何使用 <code>TRUNCATE TABLE</code> 语句清空表。 <code>TRUNCATE TABLE</code> 比 <code>DELETE</code> 速度快的多，它对于清空一个大表很有用。</p>`,27)])])}const E=e(l,[["render",n]]);export{k as __pageData,E as default};
