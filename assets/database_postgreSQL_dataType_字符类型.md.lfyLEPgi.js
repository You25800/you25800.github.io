import{_ as a,c as i,o as e,b3 as t}from"./chunks/framework.CatkIGlB.js";const o=JSON.parse('{"title":"PostgreSQL 字符类型","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/dataType/字符类型.md","filePath":"database/postgreSQL/dataType/字符类型.md","lastUpdated":1690289709000}'),l={name:"database/postgreSQL/dataType/字符类型.md"};function h(n,s,p,k,d,r){return e(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="postgresql-字符类型" tabindex="-1">PostgreSQL 字符类型 <a class="header-anchor" href="#postgresql-字符类型" aria-label="Permalink to &quot;PostgreSQL 字符类型&quot;">​</a></h1><p>本文介绍了 PostgreSQL 中的三种字符数据类型：<code>CHAR</code>，<code>VARCHAR</code>，和 <code>TEXT</code>。</p><p>字符类型以文本形式存储数据，PostgreSQL 提供了三种字符数据类型： <code>CHAR</code>，<code>VARCHAR</code>，和 <code>TEXT</code>。</p><h2 id="postgresql-字符类型用法" tabindex="-1">PostgreSQL 字符类型用法 <a class="header-anchor" href="#postgresql-字符类型用法" aria-label="Permalink to &quot;PostgreSQL 字符类型用法&quot;">​</a></h2><p>下面说明了 PostgreSQL 中的三种字符类型的用法：</p><ul><li><code>CHAR(n)</code> 存储固定长度的字符串，长度不足时，使用空白填充。</li><li><code>VARCHAR(n)</code> 存储具有长度限制的可变长度文本。</li><li><code>VARCHAR</code> 存储没有长度限制的可变长度文本。 它与 <code>TEXT</code> 完全相同。</li><li><code>TEXT</code> 存储没有长度限制的可变长度文本。</li></ul><p><code>CHAR(n)</code> 和 <code>VARCHAR(n)</code> 最多可存储 <code>n</code> 字符。 <code>VARCHAR</code> 与 <code>TEXT</code> 完全相同。</p><p>对于限制了长度的字符类型来说，如果写入的内容超过了限制的长度，PostgreSQL 采用如下的策略：</p><ul><li>如果超出长度的部分只有空格，则多余的空格会被截断。</li><li>如果超出长度的部分不只是空格，则给出错误提示。</li></ul><p>在 PostgreSQL 中，三种字符类型之间没有性能差异，因此你只需要根据的需要选择合适的类型即可。通常您应该使用 <code>TEXT</code> 或者 <code>VARCHAR</code>。</p><h2 id="postgresql-字符类型示例" tabindex="-1">PostgreSQL 字符类型示例 <a class="header-anchor" href="#postgresql-字符类型示例" aria-label="Permalink to &quot;PostgreSQL 字符类型示例&quot;">​</a></h2><p>这个示例说明了 <code>CHAR</code> ， <code>VARCHAR</code> 以及 <code>TEXT</code> 数据类型是如何工作的。</p><p>使用下面的语句<a href="./创建表.html">创建一个新表</a>用于测试：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> test_character_type</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  char_1 </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">CHAR</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">),</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  varchar_10 </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">VARCHAR</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">),</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  bash </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><h3 id="char-类型实例" tabindex="-1">CHAR 类型实例 <a class="header-anchor" href="#char-类型实例" aria-label="Permalink to &quot;CHAR 类型实例&quot;">​</a></h3><p>使用下面的语句向表中<a href="/database/postgreSQL/base/INSERT.html">插入一个新行</a>超出 <code>char_1</code> 列长度的值：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_character_type (char_1)</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">OK</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">RETURNING </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">;</span></span></code></pre></div><p>PostgreSQL 发出错误：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ERROR:  </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">value</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> too long </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">for</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> type</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> character</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span></code></pre></div><p>这是因为该 <code>char_1</code> 列的数据类型是 <code>CHAR(1)</code>，我们试图在该列中插入一个包含 2 个字符的字符串: <code>&#39;OK&#39;</code>。</p><p>使用下面的语句向表中插入一个新行超出 <code>char_1</code> 列长度的值，超出的部分为空格：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_character_type (char_1)</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Y    </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">RETURNING </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> char_1 | varchar_10 | bash</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">--------+------------+-----</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Y      |            |</span></span></code></pre></div><p>这里插入成功了。这是因为超出的部分是空格，PostgreSQL 自动截断了空格。</p><h3 id="varchar-类型实例" tabindex="-1">VARCHAR 类型实例 <a class="header-anchor" href="#varchar-类型实例" aria-label="Permalink to &quot;VARCHAR 类型实例&quot;">​</a></h3><p>使用下面的语句向表中插入一个新行超出 <code>varchar_10</code> 列长度的值：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_character_type (varchar_10)</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello World</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">RETURNING </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">;</span></span></code></pre></div><p>PostgreSQL 发出错误：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ERROR:  </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">value</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> too long </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">for</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> type</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> character varying</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span></code></pre></div><p>这是因为该 <code>varchar_10</code> 列的数据类型是 <code>VARCHAR(10)</code>，我们试图在该列中插入一个包含 11 个字符的字符串: <code>&#39;Hello World&#39;</code>。</p><p>使用下面的语句向表中插入一个新行超出 <code>varchar_10</code> 列长度的值，超出的部分为空格：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_character_type (varchar_10)</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">HelloWorld    </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">RETURNING </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> char_1 | varchar_10 | bash</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">--------+------------+-----</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        | HelloWorld |</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> row</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span></code></pre></div><p>这里插入成功了。这是因为超出的部分是空格，PostgreSQL 自动截断了空格。</p><h3 id="text-类型实例" tabindex="-1">TEXT 类型实例 <a class="header-anchor" href="#text-类型实例" aria-label="Permalink to &quot;TEXT 类型实例&quot;">​</a></h3><p>使用下面的语句向表中插入一个新行：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> test_character_type (bash)</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">TEXT column can store a string of any length</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">RETURNING bash;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">                     bash</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">----------------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> column can store a string of any </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">length</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> row</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span></code></pre></div><p>对于一个 <code>TEXT</code> 列，您可以插入任意长度的字符串。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>PostgreSQL 提供了三种字符数据类型： <code>CHAR</code>，<code>VARCHAR</code>，和 <code>TEXT</code>。 <code>CHAR</code> 是固定长度的字符类型，而 <code>VARCHAR</code> 和 <code>TEXT</code> 具有可变的长度的字符类型。</p>`,41)])])}const A=a(l,[["render",h]]);export{o as __pageData,A as default};
