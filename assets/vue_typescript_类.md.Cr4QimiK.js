import{_ as i,c as a,o as h,b3 as n}from"./chunks/framework.CatkIGlB.js";const A=JSON.parse('{"title":"类","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/类.md","filePath":"vue/typescript/类.md","lastUpdated":1692608566000}'),k={name:"vue/typescript/类.md"};function t(l,s,p,e,D,r){return h(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-label="Permalink to &quot;类&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>传统的 JavaScript 程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。从 ECMAScript 2015，也就是 ECMAScript6 开始，JavaScript 程序员将能够使用基于类的面向对象的方式。使用 TypeScript， 我们允许开发者现在地就使用这些特性，并且编译后的 JavaScript 可以在所有主流浏览器和平台上运行，而不需要等到下个 JavaScript 版本。</p><h2 id="类-1" tabindex="-1">类 <a class="header-anchor" href="#类-1" aria-label="Permalink to &quot;类&quot;">​</a></h2><p>下面是一个使用类的例子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Creeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">){</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  greet</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> greeter </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Greeter</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">world</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>如果你使用过C#或Java，你会对这种语法非常熟悉。我们声明一个Greeter类。这个类有3个成员：一个叫做<code>greeting</code>的属性，一个构造函数和一个<code>greet</code>方法。</p><p>你会注意到，我们在引用任何一个类成员的时候都用了<code>this</code>。它表示我们访问的是类的成员。</p><p>最后一行，我们使用 <code>new</code>构造了<code>Greeter</code>类的一个实例。它会调用之前定义的构造函数，创建一个<code>Greeter</code>类型的新对象，并执行构造函数初始化它。</p><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><p>在TypeScript里，我们可以使用常用的面向对象模式。基于类的程序设计中一种最基本的模式是允许使用继承来扩展现有的类。</p><p>看下面的例子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  move</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Animal moved </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">m.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Dog</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  bark</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Woof! Woof!</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> dog </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Dog</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">dog</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">back</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">dog</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">move</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">dog</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">bark</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。这里，<code>Dog</code>是一个派生类，它派生自<code>Animal</code>基类，通过<code>extends</code>关键字。派生类通常被称作子类，基类通常被称作超类。</p><p>因为<code>Dog</code>继承<code>Animal</code>的功能，因此我们可以创建一个<code>Dog</code>的实例，它能够<code>bark()</code>和<code>move()</code>。</p><p>下面我们来看个更加复杂的例子。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    move</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`\${</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> moved </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">m.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Snake</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> super</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    move</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Slithering...</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        super</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">move</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">distanceInMeters</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Horse</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> super</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    move</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 45</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Galloping...</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        super</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">move</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">distanceInMeters</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> sam </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Snake</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Sammy the Python</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Horse</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Tommy the Palomino</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">sam</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">move</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">move</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">34</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>这个例子展示了一些上面没有提到的特性。这一次，我们使用<code>extends</code>关键字创建了<code>Animal</code>的两个子类：<code>Horse</code>和<code>Snake</code>。</p><p>与前一个例子的不同点是，派生类包含了一个构造函数，它必须调用<code>super()</code>，它会执行基类的构造函数。而且，在构造函数里访问<code>this</code>的属性之前，我们一定要调用<code>super()</code>。这个是TypeScript强制执行的一条重要规则。</p><p>这个例子演示了如何在子类里可以重写父类的方法。<code>Snake</code>类和<code>Horse</code>类都创建了<code>move</code>方法，它们重写了从<code>Animal</code>继承来的<code>move</code>方法，使得<code>move</code>方法根据不同的类而具有不同的功能。注意，即使<code>tom</code>被声明为<code>Animal</code>类型，但因为它的值是<code>Horse</code>，调用<code>tom.move(34)</code>时，它会调用<code>Horse</code>里重写的方法：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Slithering</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">...</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Sammy the Python moved 5m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Galloping</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">...</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Tommy the Palomino moved 34m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span></span></code></pre></div><h2 id="公共-私有与受保护的修饰符" tabindex="-1">公共，私有与受保护的修饰符 <a class="header-anchor" href="#公共-私有与受保护的修饰符" aria-label="Permalink to &quot;公共，私有与受保护的修饰符&quot;">​</a></h2><h3 id="默认为public" tabindex="-1">默认为<code>public</code> <a class="header-anchor" href="#默认为public" aria-label="Permalink to &quot;默认为\`public\`&quot;">​</a></h3><p>在上面的例子里，我们可以自由的访问程序里定义的成员。如果你对其它语言中的类比较了解，就会注意到我们在之前的代码里并没有使用<code>public</code>来做修饰；例如，C#要求必须明确地使用<code>public</code>指定成员是可见的。在TypeScript里，成员都默认为<code>public</code>。</p><p>你也可以明确的将一个成员标记成<code>public</code>。我们可以用下面的方式来重写上面的<code>Animal</code>类：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> move</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`\${</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> moved </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">distanceInMeters</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">m.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="私有的private" tabindex="-1">私有的<code>private</code> <a class="header-anchor" href="#私有的private" aria-label="Permalink to &quot;私有的\`private\`&quot;">​</a></h2><p>当成员被标记为<code>private</code>时，它就不能在声明它的类的外部访问。比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  private</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">){</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Animal</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Cat</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error : &#39;name&#39;是私有的</span></span></code></pre></div><p>TypeScript使用的是结构性类型系统。当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p><p>然而，当我们比较带有<code>private</code>或<code>protected</code>成员的类型的时候，情况就不同了。如果其中一个类型里包含下<code>private</code>成员，那么只有当另外一个类型中也存在这样一个<code>private</code>成员，并且它们都是来自同一处声明时，我们才认为这两个类型是兼容的。对于<code>protected</code>成员也使用这个规则。</p><p>下面来看一个例子，更好地说明了这一点：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  private</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">){this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Rhino</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">super</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Rhino</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  private</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> animal </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Animal</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Goat</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> rhino </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Rhino</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employee </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Bob</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">animal </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> rhino</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">animal </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error: Animal 与 Employee 不兼容。</span></span></code></pre></div><p>这个例子中有<code>Animal</code>和<code>Rhino</code>两个类，<code>Rhino</code>是<code>Animal</code>类的子类。还有一个<code>Employee</code>类，其类型看上去与<code>Animal</code>是相同的。我们创建了几个这些类的实例，并相互赋值来看看会发生什么。因为<code>Animal</code>和<code>Rhino</code>共享了来自<code>Animal</code>里的私有成员定义<code>private name: string</code>，因此它们是兼容的。然而<code>Employee</code>却不是这样。当把<code>Employee</code>赋值给<code>Animal</code>的时候，得到一个错误，说它们的类型不兼容。尽管<code>Employee</code>里也有一个私有成员<code>name</code>，但它明显不是<code>Animal</code>里面定义的那个。</p><h3 id="受保护的protected" tabindex="-1">受保护的<code>protected</code> <a class="header-anchor" href="#受保护的protected" aria-label="Permalink to &quot;受保护的\`protected\`&quot;">​</a></h3><p><code>protected</code>修饰符与<code>private</code>修饰符的行为很相似，但有一点不同，<code>protected</code>成员在派生类中仍然可以访问。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Person</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    protected</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Person</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        super</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">        this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> getElevatorPitch</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> \`</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, my name is </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> and I work in </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> howard </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Howard</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Sales</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(howard</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">getElevatorPitch</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(howard</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Error</span></span></code></pre></div><p>注意，我们不能在<code>Person</code>类外使用<code>name</code>，但是我们仍然可以通过<code>Employee</code>类的实例方法访问，因为<code>Employee</code>是由<code>Person</code>派生而来的。</p><p>构造函数也可以被标记成<code>protected</code>。这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如，</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Person</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    protected</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    protected</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Employee 能够继承 Person</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Person</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    private</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        super</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">        this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    public</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> getElevatorPitch</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> \`</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, my name is </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> and I work in </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\${</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> howard </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Howard</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Sales</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> john </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Person</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">John</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误: &#39;Person&#39; 的构造函数是被保护的</span></span></code></pre></div><h2 id="readonly修饰符" tabindex="-1">readonly修饰符 <a class="header-anchor" href="#readonly修饰符" aria-label="Permalink to &quot;readonly修饰符&quot;">​</a></h2><p>你可以使用<code>readonly</code>关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Octopus</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  readonly</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  readonly</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> numberOfLegs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> theName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> dad </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Octopus</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Man with the 8 strong legs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">dad</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Man with the 3-piece suit</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误! name 是只读的.</span></span></code></pre></div><h2 id="参数属性" tabindex="-1">参数属性 <a class="header-anchor" href="#参数属性" aria-label="Permalink to &quot;参数属性&quot;">​</a></h2><p>在上面的例子中，我们必须在<code>Octopus</code>类里定义一个只读成员<code>name</code>和一个参数为<code>theName</code>的构造函数，并且立刻将<code>theName</code>的值赋给<code>name</code>，这种情况经常会遇到。参数属性可以方便地让我们在一个地方定义并初始化一个成员。下面的例子是对之前<code>Octopus</code>类的修改版，使用了参数属性：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Octopus</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  readonly</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> numberOfLegs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">readonly</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">){</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>注意看我们是如何舍弃了<code>theName</code>，仅在构造函数里使用<code>readonly name: string</code>参数来创建和初始化<code>name</code>成员。我们把声明和赋值合并至一处。</p><p>参数属性通过给构造函数参数前面添加一个访问限定符来声明。使用<code>private</code>限定一个参数属性会声明并初始化一个私有成员；对于<code>public</code>和<code>protected</code>来说也是一样。</p><h2 id="存取器" tabindex="-1">存取器 <a class="header-anchor" href="#存取器" aria-label="Permalink to &quot;存取器&quot;">​</a></h2><p>TypeScript支持通过getters/setters来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。</p><p>下面来看如何把一个简单的类改写成使用<code>get</code>和<code>set</code>。首先，我们从一个没有使用存取器的例子开始。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  fullName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employee </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fullName </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Bob Smith</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fullName) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fullName</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>我们可以随意的设置<code>fullName</code>，这是非常方便的，但是这也可能会带来麻烦。</p><p>下面这个版本里，我们先检查用户密码是否正确，然后再允许其修改员工信息。我们把对<code>fullName</code>的直接访问改成了可以检查密码的<code>set</code>方法。我们也加了一个<code>get</code>方法，让上面的例子仍然可以工作。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> passcode </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">secret passcode</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  private</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> _fullName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  get</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> fullName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">_fullName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  set</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> fullName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">newName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    if</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">passcode</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;&amp;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> passcode</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ==</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">secret passcode</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">      this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">_fullName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> newName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> else</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">			console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Error: Unauthorized update of employee!</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employee </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Employee</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fullName </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Bob Smith</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fullName) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">  alert</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fullName</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>我们可以修改一下密码，来验证一下存取器是否是工作的。当密码不对时，会提示我们没有权限去修改员工。</p><p>对于存取器有下面几点需要注意的：</p><p>首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。不支持降级到ECMAScript 3 。其次，只带有<code>get</code>不带有<code>set</code>的存取器自动被推断为<code>readonly</code>。这在从代码生成<code>.d.ts</code>文件时是有帮助的。因为利用这个属性的用户会看到不允许够改变它的值。</p><h2 id="静态属性" tabindex="-1">静态属性 <a class="header-anchor" href="#静态属性" aria-label="Permalink to &quot;静态属性&quot;">​</a></h2><p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。我们也可以创建类的静态成员，这此属性存在于类本身上面而不是类的实例上。在这个例子里，我们使用<code>static</code>定义<code>origin</code>，加为它是所有网格都会用到的属性。每个实例想要访问这个属性的时候，都要在<code>origin</code>前面加上类名。如同在实例属性上使用<code>this.</code>前缀来访问属性一样，这里我们使用<code>Grid.</code>来访问静态属性。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Grid</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  static</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> origin</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  calculateDistanceFromOrigin</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> xDist</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> -</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Grid</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">origin</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">x</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> yDist</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> -</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Grid</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">origin</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">y</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Math</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">sqrt</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">xDist</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">xDist</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> yDist</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">yDist</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">scale</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> scale</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">){}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> grid1 </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Grid</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1.0</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 1x scale</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> grid2 </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Grid</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5.0</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 5x scale</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(grid1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">calculateDistanceFromOrigin</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(grid2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">calculateDistanceFromOrigin</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">))</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><h2 id="抽象类" tabindex="-1">抽象类 <a class="header-anchor" href="#抽象类" aria-label="Permalink to &quot;抽象类&quot;">​</a></h2><p>抽象类做为其它派生类的基类使用。它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节。<code>abstract</code>关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">abstract</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">  abstract</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> makeSound</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  move</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">roaming the earch...</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。抽象方法的语法与接口方法相似。两者都是定义方法签名但不包含方法体。然而，抽象方法必须包含<code>abstract</code>关键字并且可以包含访问修饰符。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">abstract</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">public</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    printName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Department name: </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">name</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    abstract</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> printMeeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 必须在派生类中实现</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> AccountingDepartment</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        super</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Accounting and Auditing</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 在派生类的构造函数中必须调用 super()</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    printMeeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">The Accounting Department meets each Monday at 10am.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    generateReports</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> void</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Generating accounting reports...</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 允许创建一个对抽象类型的引用</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// department = new Department(&#39;abc&#39;);</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误: 不能创建一个抽象类的实例</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> AccountingDepartment</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 允许对一个抽象子类进行实例化和赋值</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">printName</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">printMeeting</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// department.generateReports();</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误：方法在声明的抽象类中不存在</span></span></code></pre></div><h2 id="高级技巧" tabindex="-1">高级技巧 <a class="header-anchor" href="#高级技巧" aria-label="Permalink to &quot;高级技巧&quot;">​</a></h2><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><p>当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。首先就是类的实例的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    constructor</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">        this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    greet</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Greeter</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeter </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Greeter</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">world</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">greet</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span></span></code></pre></div><p>这里我们写了<code>let greeter: Greeter</code>，意思是<code>Greeter</code>类的实例的类型是<code>Greeter</code>。这对于用过其它面向对象语言的程序员来讲已经是老习惯了。</p><p>我们也创建了一个叫做构造函数的值。这个函数会在我们使用<code>new</code>创建类实例的时候被调用。下面我们来看看，上面的代码被编译成JavaScript后是什么样子的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Greeter </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> /** </span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">@</span><span style="--shiki-light:#9C3EDA;--shiki-light-font-style:italic;--shiki-dark:#C792EA;--shiki-dark-font-style:italic;">class</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> */</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">        this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> message</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">    Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prototype</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">greet</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    };</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeter </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Greeter</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">world</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">greet</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>上面的代码里，<code>let Greeter</code>将被赋值为构造函数。当我们调用<code>new</code>并执行了这个函数后，便会得到一个类的实例。这个构造函数也包含类的所有静态属性。换个角度说，我们可以认为类具有实例部分与静态部分这两个部分。</p><p>让我们稍微改写一下这个例子，看看它们之间的区别：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    static</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> standardGreeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, there</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    greet</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        if</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> this.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        else</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">            return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">standardGreeting</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">        }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> greeter1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeter1 </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Greeter</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(greeter1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">greet</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> greeterMaker</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> typeof</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Greeter </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">greeterMaker</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">standardGreeting </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hey there!</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> greeter2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Greeter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> greeterMaker</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(greeter2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">greet</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">())</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>这个例子里，<code>greeter1</code>与之前看到的一样。我们实例化<code>Greeter</code>类，并使用这个对象。下我们之前看到的一样。</p><p>再之后，我们直接使用类。我们创建了一个叫做<code>greeterMaker</code>的变量。这个变量保存了这个类或者说保存了类构造函数。然后我们使用<code>typeof Greeter</code>，意思是取Greeter类的类型，而不是实例的类型。或者理确切的说，“告诉我<code>Greeter</code>标识符的类型“，也就是构造函数的类型。这个类型包含了类的所有静态成员和构造函数。之后，就和前面一样，我们在<code>greeterMarker</code>上使用<code>new</code>，创建<code>Greeter</code>的实例。</p><h3 id="把类当做接口使用" tabindex="-1">把类当做接口使用 <a class="header-anchor" href="#把类当做接口使用" aria-label="Permalink to &quot;把类当做接口使用&quot;">​</a></h3><p>如上一节里所讲的，类定义会创建两个东西：类的实例类型和一个构造函数。因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Point3d</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  z</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> point3d</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Point3d</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> z</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div>`,81)])])}const F=i(k,[["render",t]]);export{A as __pageData,F as default};
