import{_ as i,c as a,o as e,b3 as l}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"PostgreSQL 浮点类型","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/dataType/浮点类型.md","filePath":"database/postgreSQL/dataType/浮点类型.md","lastUpdated":1690289709000}'),n={name:"database/postgreSQL/dataType/浮点类型.md"};function t(h,s,p,k,d,r){return e(),a("div",null,[...s[0]||(s[0]=[l(`<h1 id="postgresql-浮点类型" tabindex="-1">PostgreSQL 浮点类型 <a class="header-anchor" href="#postgresql-浮点类型" aria-label="Permalink to &quot;PostgreSQL 浮点类型&quot;">​</a></h1><p>本文介绍了 PostgreSQL 中的 两种浮点数据类型：<code>REAL</code> 和 <code>DOUBLE PRECISION</code></p><p>数据类型<code>real</code>和<code>double precision</code>是不精确的、变精度的数字类型。 实际上，这些类型是 IEEE 754 标准二进制浮点数算术(分别对应单和双精度)的一般实现， 外加下层处理器、操作系统和编译器对它的支持。</p><p>不精确意味着一些数值不能精确地转换成内部格式并且是以近似值存储的， 因此存储后再把数据打印出来可能有一些差异。 处理这些错误以及这些错误是如何在计算中传播的属于数学和计算机科学的一个完整的分支， 我们不会在这里进一步讨论它，这里的讨论仅限于如下几点：</p><ul><li>如果你要求精确的计算(比如计算货币金额)，应使用<code>numeric</code>类型。</li><li>如果你想用这些类型做任何重要的复杂计算， 尤其是那些你对范围情况(无穷/下溢)严重依赖的事情，那你应该仔细评诂你的实现。</li><li>拿两个浮点数值进行相等性比较可能不像你想像那样运转。</li></ul><p>在大多数平台上，<code>real</code>类型的范围是至少 1E-37 到 1E+37， 精度至少是 6 位小数。<code>double precision</code>的范围通常是 1E-307 到 1E+308， 精度是至少 15 位数字。太大或者太小的数值都会导致错误。如果输入数据的精度太高， 那么将会发生圆整。太接近零的数字，如果无法与零值的表现形式相区分就会产生下溢错误。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>当一个浮点数值转化为文本输出时，<a href="http://www.postgres.cn/docs/9.4/runtime-config-client.html#GUC-EXTRA-FLOAT-DIGITS" target="_blank" rel="noreferrer">extra_float_digits</a> 设置控制额外有效数字的位数。默认值是<code>0</code>，PostgreSQL 支持的平台上的输出是一样的。增加这个值产生的输出将更精确的表示存储值， 但是可能不利于移植。</p></div><hr><p>除了普通的数字值之外，浮点类型还有几个特殊值：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Infinity</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Infinity</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">\`</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">NaN</span></span></code></pre></div><p>这些值分别表示 IEEE 754 特殊值&quot;正无穷大&quot;、&quot;负无穷大&quot;、 &quot;不是一个数字&quot;。在不遵循 IEEE 754 浮点算术的机器上， 这些值的含义可能不是预期的。如果在 SQL 命令里把这些数值当作常量写， 你必须在它们周围放上单引号，像这样：<code>UPDATE table SET x = &#39;Infinity&#39;</code>。 输入时，这些值是以大小写无关的方式识别的。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>IEEE754 声明<code>NaN</code>不应该等于任何其他浮点值（包括<code>NaN</code>）。 为了能存储浮点值，并且使用 Tree 索引，PostgreSQL 认为<code>NaN</code> 相等，并且大于所有非<code>NaN</code>值。</p></div><p>PostgreSQL 还支持 SQL 标准表示法<code>float</code> 和<code>float(*p*)</code>用于声明非精确的数值类型。 其中的<code>*p*</code>声明以***二进制***位表示的最低可接受精度。 在选取<code>real</code>类型的时候，PostgreSQL 接受 <code>float(1)</code>到<code>float(24)</code>，在选取<code>double precision</code> 的时候，接受<code>float(25)</code>到<code>float(53)</code>。 在允许范围之外的<code>*p*</code>值将导致一个错误。 没有声明精度的<code>float</code>将被当作<code>double precision</code>。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>假设<code>real</code>和<code>double precision</code> 分别有 24 和 53 个二进制位的位数对 IEEE 标准的浮点实现来说是正确的。在非 IEEE 平台上， 这个数值可能略有偏差，但是为了简化，我们在所有平台上都用了同样的<code>*p*</code>值范围。</p></div><h2 id="postgresql-real-数据类型介绍" tabindex="-1">PostgreSQL real 数据类型介绍 <a class="header-anchor" href="#postgresql-real-数据类型介绍" aria-label="Permalink to &quot;PostgreSQL real 数据类型介绍&quot;">​</a></h2><p>PostgreSQL 中的 <code>real</code> 数据类型是一种浮点数类型，它可以存储单精度浮点数（32 位）。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>定义 <code>real</code> 数据类型的语法如下：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">column_name </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">real</span></span></code></pre></div><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p><code>real</code> 数据类型通常用于存储具有小数部分的数值，比如温度、速度、价格等。它在科学、工程、金融等领域广泛使用。</p><p>与 <code>double precision</code> 数据类型相比，<code>real</code> 数据类型使用更少的存储空间，但精度稍低。如果您需要更高的精度，可以使用 <code>double precision</code> 数据类型。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>下面是两个使用 <code>real</code> 数据类型的示例：</p><h4 id="示例-1" tabindex="-1">示例 1 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1&quot;">​</a></h4><p>在这个示例中，我们将创建一个名为 <code>temperature</code> 的表，其中包含一个名为 <code>value</code> 的 <code>real</code> 列。<code>value</code> 列存储温度值。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> temperature</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    id </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">SERIAL</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> PRIMARY KEY</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    value</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> REAL</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> temperature (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">value</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">24</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> temperature (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">value</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">26</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">8</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>现在，我们可以查询 <code>temperature</code> 表，并计算所有温度值的平均值：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> AVG</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">value</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> temperature;</span></span></code></pre></div><p>结果为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> avg</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">--------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 25.65</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">1</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> row</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><h4 id="示例-2" tabindex="-1">示例 2 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2&quot;">​</a></h4><p>在这个示例中，我们将创建一个名为 <code>product</code> 的表，其中包含一个名为 <code>price</code> 的 <code>real</code> 列。<code>price</code> 列存储产品的价格。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> product</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    id </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">SERIAL</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> PRIMARY KEY</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    name</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> VARCHAR</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">50</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">),</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    price </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">REAL</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> product (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, price) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Product A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">19</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">99</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> product (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, price) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Product B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">29</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">99</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>现在，我们可以查询 <code>product</code> 表，并计算所有产品价格的总和：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> SUM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(price) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> product;</span></span></code></pre></div><p>结果为：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> sum</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">--------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 49.98</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">1</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> row</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><h2 id="postgresql-double-precision-数据类型介绍" tabindex="-1">PostgreSQL double precision 数据类型介绍 <a class="header-anchor" href="#postgresql-double-precision-数据类型介绍" aria-label="Permalink to &quot;PostgreSQL double precision 数据类型介绍&quot;">​</a></h2><p>PostgreSQ L 是一种强大的关系型数据库管理系统，支持许多数据类型，包括 <code>double precision</code>。</p><p><code>double precision</code> 数据类型是一种精确度为 15-17 位数字的浮点数，具有更高的精度和范围比 <code>float</code> 数据类型。它占用 8 个字节的存储空间。</p><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><p>在 PostgreSQL 中，可以使用以下语法声明 <code>double precision</code> 类型的列：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">column_name </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">DOUBLE PRECISION</span></span></code></pre></div><h3 id="使用场景-1" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景-1" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><p>由于 <code>double precision</code> 数据类型提供更高的精度和范围，因此它通常用于需要更高精度计算的情况，例如科学计算、工程和金融应用程序等。</p><h3 id="示例-3" tabindex="-1">示例 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>下面是两个 <code>double precision</code> 数据类型的示例，其中包括创建一个包含 <code>double precision</code> 列的表，并插入一些数据行。</p><p>创建一个名为 <code>employees</code> 的表，其中包含 <code>id</code>、<code>name</code> 和 <code>salary</code> 列，其中 <code>salary</code> 的数据类型为 <code>double precision</code>，</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TABLE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> employees</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    id </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">SERIAL</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> PRIMARY KEY</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    name</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> VARCHAR</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">100</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">NOT NULL</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    salary </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">DOUBLE PRECISION</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>插入一些员工数据行，</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">INSERT INTO</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employees (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, salary) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">VALUES</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">John Doe</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">95000</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">50</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">),</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Jane Smith</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">128000</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">75</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">),</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Bob Johnson</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">75000</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">.</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">25</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>接下来，我们可以查询 <code>employees</code> 表并使用 <code>ROUND</code> 函数对 <code>salary</code> 列进行四舍五入：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">-- 查询 \`employees\` 表中的数据，并将 \`salary\` 列进行四舍五入</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> name</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">ROUND</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(salary) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">as</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> rounded_salary</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employees;</span></span></code></pre></div><p>结果如下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">         |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> rounded_salary</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">--------------+----------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> John</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> Doe</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">     |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 95001</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Jane</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> Smith</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">   |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 128001</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Bob</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> Johnson</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 75000</span></span></code></pre></div><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><p><code>real</code> 数据类型是 PostgreSQL 的一种有用的浮点数类型，它在存储需要小数部分的数值时非常有用。虽然它的精度比 <code>double precision</code> 数据类型稍低，但它使用更少的存储空间，因此在某些情况下可以更有效地使用存储空间。</p><p><code>double precision</code> 提供更高的精度和范围，通常用于需要更高精度计算的情况，例如科学计算、工程和金融应用程序等。</p>`,59)])])}const A=i(n,[["render",t]]);export{c as __pageData,A as default};
