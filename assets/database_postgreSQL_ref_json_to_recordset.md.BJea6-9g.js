import{_ as e,c as a,o as t,b3 as i}from"./chunks/framework.CatkIGlB.js";const k=JSON.parse('{"title":"PostgreSQL json_to_recordset() 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/json_to_recordset.md","filePath":"database/postgreSQL/ref/json_to_recordset.md","lastUpdated":1690180485000}'),o={name:"database/postgreSQL/ref/json_to_recordset.md"};function n(r,s,l,h,p,d){return t(),a("div",null,[...s[0]||(s[0]=[i(`<h1 id="postgresql-json-to-recordset-函数" tabindex="-1">PostgreSQL json_to_recordset() 函数 <a class="header-anchor" href="#postgresql-json-to-recordset-函数" aria-label="Permalink to &quot;PostgreSQL json\\_to\\_recordset() 函数&quot;">​</a></h1><p>PostgreSQL <code>json_to_recordset()</code> 函数将指定的最顶层的 JSON 数组（元素为对象）扩展为一个在 AS 子句中定义的具有符合类型的行的集合。</p><h2 id="json-to-recordset-语法" tabindex="-1"><code>json_to_recordset()</code> 语法 <a class="header-anchor" href="#json-to-recordset-语法" aria-label="Permalink to &quot;\`json_to_recordset()\` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>json_to_recordset()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">json_to_recordset(from_json </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">JSON</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> SETOF RECORD</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>from_json</code></em></p><p>必需的。 要转的 JSON 数组，其中的元素为 JSON 对象。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>json_to_recordset()</code> 函数返回一个在 AS 子句中定义的 <code>RECORD</code> 类型值的集合，它由指定的 JSON 数组转换而来。 数组中的 JSON 对象都依照 <a href="./json_to_record.html"><code>json_to_record()</code></a> 函数被转成 <code>RECORD</code> 类型的值。</p><h2 id="json-to-recordset-示例" tabindex="-1"><code>json_to_recordset()</code> 示例 <a class="header-anchor" href="#json-to-recordset-示例" aria-label="Permalink to &quot;\`json_to_recordset()\` 示例&quot;">​</a></h2><p>本示例展示了如何使用 PostgreSQL <code>json_to_recordset()</code> 函数将一个 JSON 数组转为一个自定义类型的集合。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_to_recordset(</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">[{&quot;x&quot;: &quot;A&quot;, &quot;y&quot;: 1}, {&quot;x&quot;: &quot;B&quot;, &quot;y&quot;: 2}]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  ) </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">AS</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x(x </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, y </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> y</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">---+---</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 1</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 2</span></span></code></pre></div><p>这里，我们在 <code>AS</code> 子句中定义了要返回的行类型: <code>AS x(x TEXT, y INT)</code>。它包含两个列 <code>x</code> 和 <code>y</code>，他们分别匹配了 JSON 对象中的键。</p>`,14)])])}const _=e(o,[["render",n]]);export{k as __pageData,_ as default};
