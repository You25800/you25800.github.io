import{_ as a,c as i,o as e,b3 as t}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"PostgreSQL json_populate_recordset() 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/json_populate_recordset.md","filePath":"database/postgreSQL/ref/json_populate_recordset.md","lastUpdated":1690180485000}'),p={name:"database/postgreSQL/ref/json_populate_recordset.md"};function n(l,s,h,o,k,d){return e(),i("div",null,[...s[0]||(s[0]=[t(`<h1 id="postgresql-json-populate-recordset-函数" tabindex="-1">PostgreSQL json_populate_recordset() 函数 <a class="header-anchor" href="#postgresql-json-populate-recordset-函数" aria-label="Permalink to &quot;PostgreSQL json\\_populate\\_recordset() 函数&quot;">​</a></h1><p>PostgreSQL <code>json_populate_recordset()</code> 函数将指定的最顶层的 JSON 数组转为一个自定义的 SQL 类型值的集合。</p><h2 id="json-populate-recordset-语法" tabindex="-1"><code>json_populate_recordset()</code> 语法 <a class="header-anchor" href="#json-populate-recordset-语法" aria-label="Permalink to &quot;\`json_populate_recordset()\` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>json_populate_recordset()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">json_populate_recordset(base ANYELEMENT, from_json </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">JSON</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> SETOF ANYELEMENT</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>base</code></em></p><p>必需的。 一个任何数据类型的值。 它指明了数组中的 JSON 对象要转为的值的类型。</p></li><li><p><em><code>from_json</code></em></p><p>必需的。 要转的 JSON 数组，其中的元素为 JSON 对象。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>json_populate_recordset()</code> 函数返回一个自定义的 SQL 类型值的集合，它由指定的 JSON 数组转化而来。 JSON 数组中的每个 JSON 对象都依照 <a href="./json_populate_record.html"><code>json_populate_record()</code></a> 函数处理成自定义类型的值。</p><p>我们可以使用 <code>CREATE TYPE</code> 创建一个自定义类型，它定义了要输出的列以及每个列的类型。</p><h2 id="json-populate-recordset-示例" tabindex="-1"><code>json_populate_recordset()</code> 示例 <a class="header-anchor" href="#json-populate-recordset-示例" aria-label="Permalink to &quot;\`json_populate_recordset()\` 示例&quot;">​</a></h2><p>本示例展示了如何使用 PostgreSQL <code>json_populate_recordset()</code> 函数将一个 JSON 数组转为一个自定义 SQL 类型的值。</p><p>首先，让我们创建一个自定义的 SQL 类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> my_type</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> as</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (x </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, y </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, z </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>这里，我们创建了一个自定类型 <code>my_type</code>，它包含 3 个列 <code>x</code>, <code>y</code>, 和 <code>z</code>。</p><p>然后，让我们使用下面的语句将 JSON 数组转为 <code>my_type</code> 的集合：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_populate_recordset(</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">::my_type,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">[{&quot;x&quot;: &quot;A&quot;, &quot;y&quot;: 1}, {&quot;x&quot;: &quot;B&quot;, &quot;y&quot;: 2}]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  );</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> z</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">---+---+---</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span></span></code></pre></div><p>这里， 由于列 <code>z</code> 在 JSON 对象没有匹配的字段，因此列 <code>z</code> 中的值为 <code>NULL</code>。如果我们想在列 <code>z</code> 中使用一个固定的值，我们可以使用一个不为 null 的 <code>base</code> 参数：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_populate_recordset(</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">z</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)::my_type,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">[{&quot;x&quot;: &quot;A&quot;, &quot;y&quot;: 1}, {&quot;x&quot;: &quot;B&quot;, &quot;y&quot;: 2}]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  );</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> z</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">---+---+---</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> A</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> z</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> B</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> z</span></span></code></pre></div><p>这里，由于 <code>base</code> 参数不为 null 且列 <code>z</code> 在 JSON 对象没有匹配的字段，因此 <code>base</code> 中的 <code>z</code> 列的值被填充到输出的 <code>z</code> 列中。</p>`,22)])])}const D=a(p,[["render",n]]);export{c as __pageData,D as default};
