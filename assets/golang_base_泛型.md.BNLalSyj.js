import{_ as i,c as a,o as h,b3 as k}from"./chunks/framework.CatkIGlB.js";const A=JSON.parse('{"title":"泛型","description":"","frontmatter":{},"headers":[],"relativePath":"golang/base/泛型.md","filePath":"golang/base/泛型.md","lastUpdated":1710384876000}'),n={name:"golang/base/泛型.md"};function t(l,s,p,e,D,F){return h(),a("div",null,[...s[0]||(s[0]=[k(`<h1 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-label="Permalink to &quot;泛型&quot;">​</a></h1><h2 id="泛型简介" tabindex="-1">泛型简介 <a class="header-anchor" href="#泛型简介" aria-label="Permalink to &quot;泛型简介&quot;">​</a></h2><p>在Go语言中，泛型是一种允许开发者在函数或类型中定义与特定类型无关的通用逻辑的机制。泛型的目标是提供更通用的代码复用，减少冗余代码，提高代码的可读性和可维护性。</p><p>泛型的主要用途是实现一种可以处理多种数据类型的函数或类型，而无需为每种类型编写重复的代码。通过使用泛型，开发者可以编写更加灵活和通用的代码，以处理不同类型的数据。泛型还可以用于创建可以适应不同数据类型的通用数据结构或算法。</p><p>在Go语言中，泛型是通过类型参数化的方式实现的。通过在函数或类型名后使用尖括号<code>&lt;T&gt;</code>来表示类型参数，开发者可以定义与特定类型无关的通用逻辑。在泛型函数或类型的定义中，可以使用类型参数来代表任意类型，从而使得代码更加通用。</p><p>泛型在Go语言中的引入是为了解决传统面向对象编程语言中的一些问题。传统面向对象编程语言中，为了实现通用的功能，开发者需要编写大量的模板代码或使用宏等机制来模拟泛型的功能。然而，这些方法都有各自的缺点，如代码冗余、可读性差、难以维护等。引入泛型后，这些问题得到了有效的解决，使得开发者可以更加轻松地编写通用代码。</p><p>总之，泛型是一种允许开发者在函数或类型中定义与特定类型无关的通用逻辑的机制。它的主要用途是提高代码的复用性、可读性和可维护性，使得开发者可以更加轻松地编写通用代码。在Go语言中，泛型通过类型参数化的方式实现，使得开发者可以更加灵活地编写通用代码。</p><h2 id="泛型语法" tabindex="-1">泛型语法 <a class="header-anchor" href="#泛型语法" aria-label="Permalink to &quot;泛型语法&quot;">​</a></h2><p>泛型语法是Go语言中一项功能强大的特性，它允许开发者在函数或类型中使用任意类型作为参数，而无需为每种类型编写重复的代码。泛型语法通过类型参数化的方式实现，使得代码更具可复用性和可读性。</p><h3 id="泛型语法的结构" tabindex="-1"><strong>泛型语法的结构</strong> <a class="header-anchor" href="#泛型语法的结构" aria-label="Permalink to &quot;**泛型语法的结构**&quot;">​</a></h3><p>在Go语言中，泛型语法由类型参数、泛型函数和泛型类型三部分组成。</p><ol><li>类型参数：类型参数是用于表示任意类型的占位符。它由一个名称（类型参数名）和一个类型（实际类型）组成。类型参数在函数或类型的定义中使用，并且可以根据需要进行命名。</li><li>泛型函数：泛型函数是普通的函数，只是在其定义中使用了类型参数。泛型函数可以接受任意类型的参数，并在函数内部使用类型参数来代表这些参数的类型。在函数内部，可以使用类型参数来表示函数的参数、返回值和局部变量的类型。</li><li>泛型类型：泛型类型是通过结构体或接口的定义来引入泛型特性。泛型类型可以包含任意类型的字段或属性，并且可以根据需要进行命名。在创建泛型类型的实例时，可以使用具体的类型来替换类型参数。</li></ol><h3 id="泛型函数" tabindex="-1">泛型函数 <a class="header-anchor" href="#泛型函数" aria-label="Permalink to &quot;泛型函数&quot;">​</a></h3><p>下面是一个使用泛型语法的示例：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">package</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 泛型函数</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> GenericFunction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arg1</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> arg2</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> error</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 函数实现，使用 T 表示任意类型</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">arg1:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arg1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">arg2:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arg2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arg1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> main</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 使用 int 类型调用泛型函数</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> err </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> GenericFunction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">42</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> err </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Error:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> err</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> return</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Result:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 使用 string 类型调用泛型函数</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> err </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> GenericFunction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> err </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Error:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> err</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> return</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Result:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在上面的示例中，<code>GenericFunction</code>是一个泛型函数，使用了类型参数<code>T</code>来表示任意类型。<code>T</code>被限制为<code>any</code>类型，这意味着可以接受任何类型的参数。在函数实现中，可以使用类型参数<code>T</code>来表示参数、返回值和局部变量的类型。在<code>main</code>函数中，分别使用<code>int</code>和<code>string</code>类型来调用泛型函数，并打印结果。</p><h3 id="泛型类型" tabindex="-1">泛型类型 <a class="header-anchor" href="#泛型类型" aria-label="Permalink to &quot;泛型类型&quot;">​</a></h3><p>类型参数除了用于泛型函数之外，还可以用于Go的类型定义，来实现泛型类型(generic types)。</p><p>看如下代码示例，实现了一个泛型二叉树结构</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface{}]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	left</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> right </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	data </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Lookup</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> stringTree </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span></code></pre></div><p>二叉树节点存储的数据类型可能是多样的，有的二叉树存储<code>int</code>，有的存储<code>string</code>等等。</p><p>使用泛型，可以让<code>Tree</code>这个结构体类型支持二叉树节点存储不同的数据类型。</p><p>对于泛型类型的方法，需要在方法接收者声明对应的类型参数。比如上例里的Lookup方法，在指针接收者<code>*Tree[T]</code>里声明了类型参数<code>T</code>。</p><h3 id="泛型约束" tabindex="-1">泛型约束 <a class="header-anchor" href="#泛型约束" aria-label="Permalink to &quot;泛型约束&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    int64</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> float64</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在以上代码中，声明用作类型约束的 <code>Number</code> 接口类型。在接口内声明 <code>int64</code> 和 <code>float64</code> 的并集。本质上，您正在将联合从函数声明移动到新的类型约束中。这样，当您想要将类型参数约束为 <code>int64</code> 或 <code>float64</code> 时，您可以使用此 <code>Number</code> 类型约束，而不是写出 <code>int64 | float64</code></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// SumNumbers sums the values of map m. It supports both integers</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// and floats as map values.</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> SumNumbers</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">K</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> comparable</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> V</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">m</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> map[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">K</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">V</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> V</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> s </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">V</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> _</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> m </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> v</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> s</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在以上代码中，声明一个泛型函数，其逻辑与之前声明的泛型函数相同，但使用新的接口类型而不是联合作为类型约束。和以前一样，您使用类型参数作为参数和返回类型。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 调用SumNumbers</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ints </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> map[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int64</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">floats </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> map[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">float64</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1.1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2.2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">SumNumbers</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ints</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">),</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">SumNumbers</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">floats</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span></span></code></pre></div><p>对每个映射调用 <code>SumNumbers</code> ，打印每个映射值的总和。您可以在调用泛型函数时省略类型参数（方括号中的类型名称）。 Go 编译器可以从其他参数推断类型参数。</p><h3 id="泛型限制" tabindex="-1">泛型限制 <a class="header-anchor" href="#泛型限制" aria-label="Permalink to &quot;泛型限制&quot;">​</a></h3><p><strong>类型参数列表不能用于方法，只能用于函数</strong>。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span></code></pre></div><p>上面的例子在结构体类型<code>Foo</code>的方法<code>bar</code>使用了类型参数列表，编译会报错：methods cannot have type parameters</p><p>可以使用类型参数<code>T</code>如下：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span></code></pre></div><p><strong>注意</strong>：类型限制必须是<code>interface</code>类型。</p><p>类型限制有2个作用：</p><ol><li>用于约定有效的类型实参，不满足类型限制的类型实参会被编译器报错。</li><li>如果类型限制里的所有类型都支持某个操作，那在代码里，对应的类型参数就可以使用这个操作。</li></ol><h3 id="和" tabindex="-1">| 和 ~ <a class="header-anchor" href="#和" aria-label="Permalink to &quot;| 和 ~&quot;">​</a></h3><p><code>|</code>: 表示取并集。比如下例的<code>Number</code>这个interface可以作为类型限制，用于限定类型参数必须是int，int32和int64这3种类型。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface{</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">	int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int64</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p><code>~T</code>: <code>~</code> 是Go 1.18新增的符号，<code>~T</code>表示底层类型是T的所有类型。<code>~</code>的英文读作tilde。</p><ul><li><p>例1：比如下例的<code>AnyString</code>这个interface可以作为类型限制，用于限定类型参数的底层类型必须是string。<code>string</code>本身以及下面的<code>MyString</code>都满足<code>AnyString</code>这个类型限制。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> AnyString</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">   ~</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> MyString</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> string</span></span></code></pre></div></li><li><p>例2：再比如，我们定义一个新的类型限制叫<code>customConstraint</code>，用于限定底层类型为<code>int</code>并且实现了<code>String() string</code>方法的所有类型。下面的<code>customInt</code>就满足这个type constraint。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> customConstraint</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">   ~</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">   String</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> string</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> customInt</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">i </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">customInt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> String</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">   return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> strconv</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Itoa</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">))</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li></ul><p>几个注意点：</p><ul><li><p>可以直接在方括号[]里，直接定义类型限制，即使用类型限制字面值，比如上例。</p></li><li><p>在类型限制的位置，<code>interface{E}</code>也可以直接写为<code>E</code>，因此就可以理解<code>interface{~[]E}</code>可以写为<code>~[]E</code>。</p></li><li><p><code>any</code>是Go 1.18新增的预声明标识符，是<code>interface{}</code>的别名。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">S </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">interface{~[]</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> E </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">interface{}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">S </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">~[]</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> E </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">interface{}]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">S </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">~[]</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> E </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span></code></pre></div></li></ul><h2 id="类型推导" tabindex="-1">类型推导 <a class="header-anchor" href="#类型推导" aria-label="Permalink to &quot;类型推导&quot;">​</a></h2><p>我们看下面的代码示例：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> min</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> constraints</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Ordered</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> y</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> y </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">		return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> y</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> m1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> m2 </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">float64</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 方式1：显式指定type argument</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">m1 </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> min</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">float64</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 方式2：不指定type argument，让编译器自行推导</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">m2 </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> min</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><p>方式2没有传递类型实参，编译器是根据函数实参<code>a</code>和<code>b</code>推导出类型实参。</p><p>类型推导可以让我们的代码更简洁，更具可读性。</p><p>Go泛型有2种类型推导：</p><ol><li><p>通过函数的实参推导出来具体的类型。比如上面例子里的<code>m2 = min(a, b)</code>，就是根据<code>a</code>和<code>b</code>这2个函数实参</p><p>推导出来<code>T</code>是<code>float64</code>。</p></li><li><p>通过已经确定的类型实参，推导出未知的类型实参。下面的代码示例里，根据函数实参2不能确定<code>E</code>是什么类型，但是可以确定<code>S</code>是<code>[]int32</code>，再结合类型限制里<code>S</code>的底层类型是<code>[]E</code>，可以推导出<code>E</code>是int32，int32满足<code>constraints.Integer</code>限制，因此推导成功。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int32</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> ScaleAndPrint</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Point</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  r </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Scale</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">r</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Scale</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">S</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ~[]</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> E</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> constraints</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Integer</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> S</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> c</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> E</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> S</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  r </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> make</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">S</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">))</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    r</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> v </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> c</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> r</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></li></ol><p><strong>类型推导并不是一定成功</strong>，比如类型参数用在函数的返回值或者函数体内，这种情况就必须指定类型实参了。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> test</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> test</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>更深入了解type inference可以参考：<a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#type-inference" target="_blank" rel="noreferrer">https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#type-inference</a></p><h2 id="泛型代码示例" tabindex="-1">泛型代码示例 <a class="header-anchor" href="#泛型代码示例" aria-label="Permalink to &quot;泛型代码示例&quot;">​</a></h2><h3 id="stack-栈" tabindex="-1">Stack 栈 <a class="header-anchor" href="#stack-栈" aria-label="Permalink to &quot;Stack 栈&quot;">​</a></h3><p>示例来源<a href="https://coolshell.cn/articles/21615.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/21615.html</a></p><p>编程支持泛型最大的优势就是可以实现类型无关的数据结构了。下面，我们用Slices这个结构体来实现一个Stack的数结构。</p><p>首先，我们可以定义一个泛型的Stack</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> [</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">T </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span></span></code></pre></div><p>看上去很简单，还是 <code>[T any]</code> ，然后 <code>[]T</code> 就是一个数组，接下来就是实现这个数据结构的各种方法了。下面的代码实现了 <code>Push()</code> ，<code>Top()</code>，<code>Top()</code>，<code>Len()</code>，<code>Print()</code>这几个方法，这几个方法和 C++的STL中的 Stack很类似。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">elem</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> append</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Pop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	if</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &gt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">		*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)[:</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)-</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Top</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	if</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &gt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">		return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)[</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)-</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> _</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">		fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">		fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>上面的这个例子还是比较简单的，不过在实现的过程中，对于一个如果栈为空，那么 <code>Top()</code>要么返回<code>error</code>要么返回空值，在这个地方卡了一下。因为，之前，我们返回的“空”值，要么是 int 的<code>0</code>，要么是 string 的 <code>“”</code>，然而在泛型的<code>T</code>下，这个值就不容易搞了。也就是说，除了类型泛型后，还需要有一些“值的泛型”（注：在C++中，如果你要用一个空栈进行 <code>Top()</code> 操作，你会得到一个 segmentation fault），所以，这里我们返回的是一个指针，这样可以判断一下指针是否为空。</p><p>下面是如何使用这个stack的代码。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> main</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]{}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hao</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Chen</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">stack top is - </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%v</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Top</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()))</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Pop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Pop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ss</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Stack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]{}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">20</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Pop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Top</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Pop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">stack top is - </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%v</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ns</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Top</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">())</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h4 id="linklist-双向链表" tabindex="-1">LinkList 双向链表 <a class="header-anchor" href="#linklist-双向链表" aria-label="Permalink to &quot;LinkList 双向链表&quot;">​</a></h4><p>示例来源<a href="https://coolshell.cn/articles/21615.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/21615.html</a></p><p>下面我们再来看一个双向链表的实现。下面这个实现中实现了 这几个方法：</p><ul><li><code>add()</code> – 从头插入一个数据结点</li><li><code>push()</code> – 从尾插入一个数据结点</li><li><code>del()</code> – 删除一个结点（因为需要比较，所以使用了 <code>compareable</code> 的泛型）</li><li><code>print()</code> – 从头遍历一个链表，并输出值。</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> node</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> comparable</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  data </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  prev </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">node</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">node</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> comparable</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  head</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">node</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  len </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">l </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> isEmpty</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;&amp;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">l </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> add</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  n </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">node</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    data </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> data</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    prev </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">isEmpty</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prev </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">l </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  n </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">node</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    data </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> data</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    prev </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">isEmpty</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> n</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">l </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> del</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> data </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">data </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">      </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">      if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">      if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tail </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prev</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">      if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prev </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prev</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">      if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">        p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prev </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prev</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">      }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">      return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">l </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">isEmpty</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">the link list is empty.</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">head</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">!=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> nil;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">next </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">[</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%v</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">] -&gt; </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> p</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">data</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">nil</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>上面这个代码都是一些比较常规的链表操作，学过链表数据结构的同学应该都不陌生，使用的代码也不难，如下所示，都很简单，看代码就好了。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> main</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(){</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> l </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]{}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">add</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">add</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">push</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">add</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> //[5] -&gt; [2] -&gt; [1] -&gt; [3] -&gt; [4] -&gt; nil</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">del</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">del</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">del</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  l</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> //[2] -&gt; [3] -&gt; nil</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h3 id="函数式范型" tabindex="-1">函数式范型 <a class="header-anchor" href="#函数式范型" aria-label="Permalink to &quot;函数式范型&quot;">​</a></h3><p>示例来源<a href="https://coolshell.cn/articles/21615.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/21615.html</a></p><p>接下来，我们就要来看一下我们函数式编程的三大件 <code>map()</code> 、 <code>reduce()</code> 和 <code>filter()</code> 。</p><h4 id="泛型map" tabindex="-1">泛型Map <a class="header-anchor" href="#泛型map" aria-label="Permalink to &quot;泛型Map&quot;">​</a></h4><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T1</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> T2</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> make</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">([]</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> len</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">))</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arr </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在上面的这个 map函数中我使用了两个类型 – <code>T1</code> 和 <code>T2</code> ，</p><ul><li><code>T1</code> – 是需要处理数据的类型</li><li><code>T2</code> – 是处理后的数据类型</li></ul><p><code>T1</code> 和 <code>T2</code> 可以一样，也可以不一样。</p><p>我们还有一个函数参数 – <code>func(T1) T2</code> 意味着，进入的是 <code>T1</code> 类型的，出来的是 <code>T2</code> 类型的。</p><p>然后，整个函数返回的是一个 <code>[]T2</code></p><p>好的，我们来看一下怎么使用这个map函数：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">6</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">7</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">9</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">squares </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">squares</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  //0 1 4 9 16 25 36 49 64 81 </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">strs </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hao</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Chen</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">MegaEase</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">upstrs </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">strs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">s</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> strings</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">ToUpper</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">s</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">upstrs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // HAO CHEN MEGAEASE </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">dict </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">零</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">壹</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">贰</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">叁</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">肆</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">伍</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">陆</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">柒</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">捌</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">玖</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">strs </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">  gMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  dict</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">strs</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 零 壹 贰 叁 肆 伍 陆 柒 捌 玖</span></span></code></pre></div><h4 id="泛型-reduce" tabindex="-1">泛型 Reduce <a class="header-anchor" href="#泛型-reduce" aria-label="Permalink to &quot;泛型 Reduce&quot;">​</a></h4><p>接下来，我们再来看一下我们的Reduce函数，reduce函数是把一堆数据合成一个。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gReduce</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T1</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> T2</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> init</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> T2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> init</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> _</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arr </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>函数实现起来很简单，但是感觉不是很优雅。</p><ul><li>也是有两个类型 <code>T1</code> 和 <code>T2</code>，前者是输出数据的类型，后者是佃出数据的类型。</li><li>因为要合成一个数据，所以需要有这个数据的初始值 <code>init</code>，是 <code>T2</code> 类型</li><li>而自定义函数 <code>func(T2, T1) T2</code>，会把这个init值传给用户，然后用户处理完后再返回出来。</li></ul><p>下面是一个使用上的示例——求一个数组的和</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">6</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">7</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">9</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">sum </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gReduce</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Sum = </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%d</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> \\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> sum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><h4 id="泛型-filter" tabindex="-1">泛型 filter <a class="header-anchor" href="#泛型-filter" aria-label="Permalink to &quot;泛型 filter&quot;">​</a></h4><p>filter函数主要是用来做过滤的，把数据中一些符合条件（filter in）或是不符合条件（filter out）的数据过滤出来，下面是相关的代码示例</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> in</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> _</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arr </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    choose </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    if</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">in </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&amp;&amp;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> choose</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ||</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (!</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">in </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&amp;&amp;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> !</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">choose</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">      result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> append</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">result</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilterIn</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;"> true</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilterOut</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilter</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#FF5370;--shiki-dark:#FF9CAC;"> false</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>其中，用户需要提从一个 <code>bool</code> 的函数，我们会把数据传给用户，然后用户只需要告诉我行还是不行，于是我们就会返回一个过滤好的数组给用户。</p><p>比如，我们想把数组中所有的奇数过滤出来</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">4</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">6</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">7</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">9</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">odds </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilterIn</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">nums</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">%</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ==</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">odds</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><h4 id="业务示例" tabindex="-1">业务示例 <a class="header-anchor" href="#业务示例" aria-label="Permalink to &quot;业务示例&quot;">​</a></h4><p>示例来源<a href="https://coolshell.cn/articles/21615.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/21615.html</a></p><p>首先，我们先声明一个员工对象和相关的数据</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Name     </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Age      </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Vacation </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  Salary   </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">float32</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> employees </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Hao</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 44</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 8000.5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Bob</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 34</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 5000.5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Alice</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 23</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 5</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 9000.0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Jack</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 26</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 4000.0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 48</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 9</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 7500.75</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Marry</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 29</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 6000.0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Mike</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 4000.3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>然后，我们想统一下所有员工的薪水，我们就可以使用前面的reduce函数</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">total_pay </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gReduce</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employees</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0.0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">result</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> float32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> float32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> result </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Salary</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Total Salary: </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%0.2f</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> total_pay</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // Total Salary: 43502.05</span></span></code></pre></div><p>我们函数这个 <code>gReduce</code> 函数有点啰嗦，还需要传一个初始值，在用户自己的函数中，还要关心 <code>result</code> 我们还是来定义一个更好的版本。</p><p>一般来说，我们用 reduce 函数大多时候基本上是统计求和或是数个数，所以，是不是我们可以定义的更为直接一些？比如下面的这个 <code>CountIf()</code>，就比上面的 Reduce 干净了很多。</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gCountIf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  cnt </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> _</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arr </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    if</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">      cnt </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> cnt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>我们做求和，我们也可以写一个Sum的泛型。</p><ul><li>处理 <code>T</code> 类型的数据，返回 <code>U</code>类型的结果</li><li>然后，用户只需要给我一个需要统计的 <code>T</code> 的 <code>U</code> 类型的数据就可以了。</li></ul><p>代码如下所示：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Sumable</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  type</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int16</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int64</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">        uint</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> uint8</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> uint16</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> uint32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> uint64</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">        float32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> float64</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gSum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> U</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Sumable</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">arr</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> U</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> U</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> sum </span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">U</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> _</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> elem </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> arr </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    sum </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">+=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">elem</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> sum</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>上面的代码我们动用了一个叫 Sumable 的接口，其限定了 U 类型，只能是 Sumable里的那些类型，也就是整型或浮点型，这个支持可以让我们的泛型代码更健壮一些。</p><p>于是，我们就可以完成下面的事了。</p><p><strong>1）统计年龄大于40岁的员工数</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">old </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gCountIf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employees</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">e Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Age </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 40</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">old people(&gt;40): </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%d</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> old</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// ld people(&gt;40): 2</span></span></code></pre></div><p><strong>2）统计薪水超过 6000元的员工数</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">high_pay </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gCountIf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employees</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Salary </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 6000</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">High Salary people(&gt;6k): </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%d</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> high_pay</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">//High Salary people(&gt;6k): 4</span></span></code></pre></div><p><strong>3）统计年龄小于30岁的员工的薪水</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">younger_pay </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gSum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employees</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> float32</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  if</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Age </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 30</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">      return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Salary</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  }</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Total Salary of Young People: </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%0.2f</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> younger_pay</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">//Total Salary of Young People: 19000.00</span></span></code></pre></div><p><strong>4）统计全员的休假天数</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">total_vacation </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gSum</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employees</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> int</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Vacation</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Printf</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Total Vacation: </span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">%d</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> day(s)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">\\n</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> total_vacation</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">//Total Vacation: 32 day(s)</span></span></code></pre></div><p><strong>5）把没有休假的员工过滤出来</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">no_vacation </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> gFilterIn</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">employees</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> func(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">e</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Employee</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> bool</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> e</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Vacation </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">==</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">})</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">print</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">no_vacation</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">//{Hao 44 0 8000.5} {Jack 26 0 4000} {Marry 29 0 6000}</span></span></code></pre></div><h3 id="封装通用list2tree" tabindex="-1">封装通用List2Tree <a class="header-anchor" href="#封装通用list2tree" aria-label="Permalink to &quot;封装通用List2Tree&quot;">​</a></h3><p>Golang 中如何使用泛型封装列表转树的函数？</p><h3 id="一、封装" tabindex="-1">一、封装 <a class="header-anchor" href="#一、封装" aria-label="Permalink to &quot;一、封装&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 定义一个接口类型Tree</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> interface</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">    GetParentId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // 获取上级id </span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">    GetRootId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // 获取定好的根级id值</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">    SetChild</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // 设置子级分类的方法</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">    GetId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // 获取id</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 用于列表转树的方法</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> List2Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    treeMap </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> make</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(map[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">][]*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> i </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> list </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">       v </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">       treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">GetParentId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">v</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> append</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">GetParentId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">v</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)],</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> v</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    tree </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">GetRootId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()]</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">    getChildren</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 递归设置子孙级</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> getChildren</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> map[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">][]*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> root</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> f</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">T</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">])</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    for</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> i </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> range</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> root </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">       v </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> root</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">]</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">       getChildren</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">SetChild</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">v</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> treeMap</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">GetId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">v</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)]),</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> f</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h3 id="二、使用" tabindex="-1">二、使用 <a class="header-anchor" href="#二、使用" aria-label="Permalink to &quot;二、使用&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 定义一个存在上下级关系的部门结构体</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">type</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> struct</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ID </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	Name     </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">                          </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	Code     </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">string</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">   </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	ParentId </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">int</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    // 上级id</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	Children </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[]*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 实现Tree[T any]接口 所有方法</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">d </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> GetParentId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> t</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ParentId</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">d </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> GetRootId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 0</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">d </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> SetChild</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">parent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">FindProductClassTree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">FindProductClassTree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> []*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">FindProductClassTree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	parent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Children </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> children</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> parent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Children</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">d </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> GetId</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">t</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> *</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">	return</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> t</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">ID</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">func</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> main</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">	var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> list </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[]*</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">	// 从数据库获取部门列表----此处省略代码</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	tree </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> List2Tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">[</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">](</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">list</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Department</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{})</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">	fmt</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">Println</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">tree</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h2 id="泛型的应用场景" tabindex="-1">泛型的应用场景 <a class="header-anchor" href="#泛型的应用场景" aria-label="Permalink to &quot;泛型的应用场景&quot;">​</a></h2><ul><li><p>需要使用slice, map, channel类型，但是slice, map, channel里的元素类型可能有多种。</p></li><li><p>通用的数据结构，比如链表，</p></li><li><p>如果开发中出现大量重复业务，只是类型不同，建议使用泛型。</p></li></ul>`,132)])])}const d=i(n,[["render",t]]);export{A as __pageData,d as default};
