import{_ as a,c as n,o as p,b3 as e}from"./chunks/framework.CatkIGlB.js";const l="/assets/640.CAjlfXK7.png",i="/assets/640-20250612095507257.BTiAb3lE.png",g=JSON.parse('{"title":"LINUX","description":"","frontmatter":{},"headers":[],"relativePath":"tool/linux/README.md","filePath":"tool/linux/README.md","lastUpdated":1761028084000}'),t={name:"tool/linux/README.md"};function o(c,s,h,r,d,u){return p(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="linux" tabindex="-1">LINUX <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;LINUX&quot;">​</a></h1><h2 id="关机命令" tabindex="-1">关机命令 <a class="header-anchor" href="#关机命令" aria-label="Permalink to &quot;关机命令&quot;">​</a></h2><p>关机指令为shutdown；</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">sync</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 将数据由内存同步到硬盘</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -h</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 10</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 这个命令告诉大家，计算机将在10分钟后关机</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -h</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> now</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 马上关机</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -h</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> 22:25</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 系统会在今天22:25关机</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -h</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> +10</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 十分钟后关机</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -r</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> now</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 系统立马重启</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">shutdown</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -r</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> +10</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 系统十分钟后重启</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">reboot</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 就是重启，等同于shutdown -r now</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">halt</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 关闭系统， 等同与shutdown -h now 和 poweroff</span></span></code></pre></div><blockquote><p>不管是重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中。</p></blockquote><h2 id="系统后目录结构" tabindex="-1">系统后目录结构 <a class="header-anchor" href="#系统后目录结构" aria-label="Permalink to &quot;系统后目录结构&quot;">​</a></h2><ol><li>一切皆文件</li><li>根目录/，所有文件都挂在这个目录下</li></ol><blockquote><p>以下是对这些目录的解释：</p></blockquote><ul><li>/bin： bin是Binary的缩写，这个目录存放着最经常使用的命令。</li><li>/boot：这里存放的是启动linux时使用的一些核心文件，包括一些连接文件以及镜像文件。（不要动）</li><li>/dev：dev时Device（设备）的缩写，存放的是liunx的外部设备，在linux中访问设备的方式和访问文件的方式是相同的。</li><li>==/etc==：这个目录用来存放所有的系统管理所需要的配置文件和子目录。Redis配置等。</li><li>/home：用户的主目录，在linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>/lib：这个目录里存放着系统最基本的动态链接共享库，其作用类似于windows里的DLL文件。（不要动）</li><li>/lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。（不要动）</li><li>/media：linux系统会自动识别一些设备，例如u盘、光驱等等，当识别后，linux会把识别的设备挂在到这个目录下。</li><li>/mnt：系统提供该目录为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。(我们后面会把一些本地文件挂载在这个目录下)</li><li>==/opt==：这是给主机额外安装软件所摆放的目录。比如你安装一个ORSACLE数据库则就可以放到这个目录下。默认是空的。</li><li>/proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。(不用管)</li><li>==/root==：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>/sbin：s就是super user的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>/srv：该目录存放一些服务启动之后需要提取的数据。</li><li>/sys/：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs。</li><li>==/tmp==：这个目录是用来存放一些临时文件的。</li><li>==/usr==：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li>/usr/bin：系统用户使用的应用程序。</li><li>/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。</li><li>/usr/src：内核源代码默认的放置目录。</li><li>==/var==：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li><li>==/www：存放服务器网站相关的资源，环境，网站的项目==（部署项目时个人创建）</li></ul><h2 id="常用基本命令" tabindex="-1">常用基本命令 <a class="header-anchor" href="#常用基本命令" aria-label="Permalink to &quot;常用基本命令&quot;">​</a></h2><h3 id="目录管理" tabindex="-1">目录管理 <a class="header-anchor" href="#目录管理" aria-label="Permalink to &quot;目录管理&quot;">​</a></h3><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><p><strong>绝对路径：</strong></p><p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p><p><strong>相对路径：</strong></p><p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>ls （列出目录）</p></blockquote><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span></span></code></pre></div><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@www ~]# ls -al ~</span></span></code></pre></div><blockquote><p>cd （切换目录）</p></blockquote><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>cd [相对路径或绝对路径]</span></span></code></pre></div><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 切换到用户目录下</span></span>
<span class="line"><span>[root@kuangshen /]# cd home  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用 mkdir 命令创建 kuangstudy 目录</span></span>
<span class="line"><span>[root@kuangshen home]# mkdir kuangstudy</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 进入 kuangstudy 目录</span></span>
<span class="line"><span>[root@kuangshen home]# cd kuangstudy</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 回到上一级</span></span>
<span class="line"><span>[root@kuangshen kuangstudy]# cd ..</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 回到根目录</span></span>
<span class="line"><span>[root@kuangshen kuangstudy]# cd /</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 表示回到自己的家目录，亦即是 /root 这个目录</span></span>
<span class="line"><span>[root@kuangshen kuangstudy]# cd ~</span></span></code></pre></div><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><blockquote><p>pwd ( 显示目前所在的目录 )</p></blockquote><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen kuangstudy]#pwd [-P]</span></span></code></pre></div><p>选项与参数：<strong>-P</strong> ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 单纯显示出目前的工作目录</span></span>
<span class="line"><span>[root@kuangshen ~]# pwd</span></span>
<span class="line"><span>/root</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果是链接，要显示真实地址，可以使用 -P参数</span></span>
<span class="line"><span>[root@kuangshen /]# cd bin</span></span>
<span class="line"><span>[root@kuangshen bin]# pwd -P</span></span>
<span class="line"><span>/usr/bin</span></span></code></pre></div><blockquote><p>mkdir （创建新目录）</p></blockquote><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>mkdir [-mp] 目录名称</span></span></code></pre></div><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 进入我们用户目录下</span></span>
<span class="line"><span>[root@kuangshen /]# cd /home</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建一个 test 文件夹</span></span>
<span class="line"><span>[root@kuangshen home]# mkdir test</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建多层级目录</span></span>
<span class="line"><span>[root@kuangshen home]# mkdir test1/test2/test3/test4</span></span>
<span class="line"><span>mkdir: cannot create directory ‘test1/test2/test3/test4’:</span></span>
<span class="line"><span>No such file or directory  # &lt;== 没办法直接创建此目录啊！</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span></span>
<span class="line"><span>[root@kuangshen home]# mkdir -p test1/test2/test3/test4</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建权限为 rwx--x--x 的目录。</span></span>
<span class="line"><span>[root@kuangshen home]# mkdir -m 711 test2</span></span>
<span class="line"><span>[root@kuangshen home]# ls -l</span></span>
<span class="line"><span>drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span></span>
<span class="line"><span>drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span></span>
<span class="line"><span>drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span></span></code></pre></div><blockquote><p>rmdir ( 删除空的目录 )</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>rmdir [-p] 目录名称</span></span></code></pre></div><p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 看看有多少目录存在？</span></span>
<span class="line"><span>[root@kuangshen home]# ls -l</span></span>
<span class="line"><span>drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span></span>
<span class="line"><span>drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span></span>
<span class="line"><span>drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可直接删除掉，没问题</span></span>
<span class="line"><span>[root@kuangshen home]# rmdir test</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 因为尚有内容，所以无法删除！</span></span>
<span class="line"><span>[root@kuangshen home]# rmdir test1</span></span>
<span class="line"><span>rmdir: failed to remove ‘test1’: Directory not empty</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。</span></span>
<span class="line"><span>[root@kuangshen home]# rmdir -p test1/test2/test3/test4</span></span></code></pre></div><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p><blockquote><p>cp ( 复制文件或目录 )</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)</span></span>
<span class="line"><span>[root@www ~]# cp [options] source1 source2 source3 .... directory</span></span></code></pre></div><p>选项与参数：</p><ul><li>**-a：**相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li>**-p：**连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li>**-d：**若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li>**-r：**递归持续复制，用於目录的复制行为；(常用)</li><li>**-f：**为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>**-i：**若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li>**-l：**进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li>**-s：**复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li>**-u：**若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 找一个有文件的目录，我这里找到 root目录</span></span>
<span class="line"><span>[root@kuangshen home]# cd /root</span></span>
<span class="line"><span>[root@kuangshen ~]# ls</span></span>
<span class="line"><span>install.sh</span></span>
<span class="line"><span>[root@kuangshen ~]# cd /home</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 复制 root目录下的install.sh 到 home目录下</span></span>
<span class="line"><span>[root@kuangshen home]# cp /root/install.sh /home</span></span>
<span class="line"><span>[root@kuangshen home]# ls</span></span>
<span class="line"><span>install.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 再次复制，加上-i参数，增加覆盖询问？</span></span>
<span class="line"><span>[root@kuangshen home]# cp -i /root/install.sh /home</span></span>
<span class="line"><span>cp: overwrite ‘/home/install.sh’? y # n不覆盖，y为覆盖</span></span></code></pre></div><blockquote><p>rm ( 移除文件或目录 )</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>rm [-fir] 文件或目录</span></span></code></pre></div><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 将刚刚在 cp 的实例中创建的 install.sh删除掉！</span></span>
<span class="line"><span>[root@kuangshen home]# rm -i install.sh</span></span>
<span class="line"><span>rm: remove regular file ‘install.sh’? y</span></span>
<span class="line"><span># 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 尽量不要在服务器上使用 rm -rf /</span></span></code></pre></div><blockquote><p>mv ( 移动文件与目录，或修改名称 )</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@www ~]# mv [-fiu] source destination</span></span>
<span class="line"><span>[root@www ~]# mv [options] source1 source2 source3 .... directory</span></span></code></pre></div><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 复制一个文件到当前目录</span></span>
<span class="line"><span>[root@kuangshen home]# cp /root/install.sh /home</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 创建一个文件夹 test</span></span>
<span class="line"><span>[root@kuangshen home]# mkdir test</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将复制过来的文件移动到我们创建的目录，并查看</span></span>
<span class="line"><span>[root@kuangshen home]# mv install.sh test</span></span>
<span class="line"><span>[root@kuangshen home]# ls</span></span>
<span class="line"><span>test</span></span>
<span class="line"><span>[root@kuangshen home]# cd test</span></span>
<span class="line"><span>[root@kuangshen test]# ls</span></span>
<span class="line"><span>install.sh</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将文件夹重命名，然后再次查看！</span></span>
<span class="line"><span>[root@kuangshen test]# cd ..</span></span>
<span class="line"><span>[root@kuangshen home]# mv test mvtest</span></span>
<span class="line"><span>[root@kuangshen home]# ls</span></span>
<span class="line"><span>mvtest</span></span></code></pre></div><h3 id="基本属性" tabindex="-1">基本属性 <a class="header-anchor" href="#基本属性" aria-label="Permalink to &quot;基本属性&quot;">​</a></h3><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p><img src="`+l+'" alt="图片"></p><p>实例中，boot文件的第一个属性用&quot;d&quot;表示。&quot;d&quot;在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><p><img src="'+i+`" alt="图片"></p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用&quot;r&quot;字符表示，则有读权限，如果用&quot;-&quot;字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用&quot;w&quot;字符表示，则有写权限，如果用&quot;-&quot;字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用&quot;x&quot;字符表示，则有执行权限，如果用&quot;-&quot;字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><blockquote><p>修改文件属性</p></blockquote><p><strong>1、chgrp：更改文件属组</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>chgrp [-R] 属组名 文件名</span></span></code></pre></div><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>chown [–R] 属主名 文件名</span></span>
<span class="line"><span>chown [-R] 属主名：属组名 文件名</span></span></code></pre></div><p><strong>3、chmod：更改文件9个属性</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>chmod [-R] xyz 文件或目录</span></span></code></pre></div><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>r:4     w:2         x:1</span></span></code></pre></div><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx---] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= --- = 0+0+0 = 0</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>chmod 770 filename</span></span></code></pre></div><p>可以自己下去多进行测试！</p><h3 id="文件内容查看" tabindex="-1">文件内容查看 <a class="header-anchor" href="#文件内容查看" aria-label="Permalink to &quot;文件内容查看&quot;">​</a></h3><blockquote><p>概述</p></blockquote><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>cat 由第一行开始显示文件内容</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>cat [-AbEnTv]</span></span></code></pre></div><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/</span></span>
<span class="line"><span>[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0</span></span>
<span class="line"><span>DEVICE=eth0</span></span>
<span class="line"><span>BOOTPROTO=dhcp</span></span>
<span class="line"><span>ONBOOT=yes</span></span></code></pre></div><blockquote><p>tac</p></blockquote><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0</span></span>
<span class="line"><span>ONBOOT=yes</span></span>
<span class="line"><span>BOOTPROTO=dhcp</span></span>
<span class="line"><span>DEVICE=eth0</span></span></code></pre></div><blockquote><p>nl 显示行号</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>nl [-bnw] 文件</span></span></code></pre></div><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth0</span></span>
<span class="line"><span>1DEVICE=eth0</span></span>
<span class="line"><span>2BOOTPROTO=dhcp</span></span>
<span class="line"><span>3ONBOOT=yes</span></span></code></pre></div><blockquote><p>more 一页一页翻动</p></blockquote><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter ：代表向下翻『一行』；</li><li>/字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f ：立刻显示出档名以及目前显示的行数；</li><li>q ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen etc]# more /etc/csh.login</span></span>
<span class="line"><span>....(中间省略)....</span></span>
<span class="line"><span>--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span></span></code></pre></div><blockquote><p>less 一页一页翻动，以下实例输出/etc/man.config文件的内容：</p></blockquote><p>less运行时可以输入的命令有：</p><ul><li>空白键 ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>/字串 ：向下搜寻『字串』的功能；</li><li>?字串 ：向上搜寻『字串』的功能；</li><li>n ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q ：离开 less 这个程序；</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen etc]# more /etc/csh.login</span></span>
<span class="line"><span>....(中间省略)....</span></span>
<span class="line"><span>:   # 这里可以等待你输入命令！</span></span></code></pre></div><blockquote><p>head 取出文件前面几行</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>head [-n number] 文件</span></span></code></pre></div><p>选项与参数：<strong>-n</strong> 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen etc]# head -n 20 /etc/csh.login</span></span></code></pre></div><blockquote><p>tail 取出文件后面几行</p></blockquote><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>tail [-n number] 文件</span></span></code></pre></div><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen etc]# tail -n 20 /etc/csh.login</span></span></code></pre></div><blockquote><p>拓展：Linux 链接概念</p></blockquote><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，<strong>ln</strong> 命令产生硬链接。</p><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@kuangshen /]# cd /home</span></span>
<span class="line"><span>[root@kuangshen home]# touch f1 # 创建一个测试文件f1</span></span>
<span class="line"><span>[root@kuangshen home]# ls</span></span>
<span class="line"><span>f1</span></span>
<span class="line"><span>[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2</span></span>
<span class="line"><span>[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3</span></span>
<span class="line"><span>[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息</span></span>
<span class="line"><span>397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1</span></span>
<span class="line"><span>397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2</span></span>
<span class="line"><span>397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span></span></code></pre></div><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># echo 字符串输出 &gt;&gt; f1 输出到 f1文件</span></span>
<span class="line"><span>[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1</span></span>
<span class="line"><span>[root@kuangshen home]# cat f1</span></span>
<span class="line"><span>I am f1 file</span></span>
<span class="line"><span>[root@kuangshen home]# cat f2</span></span>
<span class="line"><span>I am f1 file</span></span>
<span class="line"><span>[root@kuangshen home]# cat f3</span></span>
<span class="line"><span>I am f1 file</span></span>
<span class="line"><span>[root@kuangshen home]# rm -f f1</span></span>
<span class="line"><span>[root@kuangshen home]# cat f2</span></span>
<span class="line"><span>I am f1 file</span></span>
<span class="line"><span>[root@kuangshen home]# cat f3</span></span>
<span class="line"><span>cat: f3: No such file or directory</span></span></code></pre></div><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul><h3 id="用户管理" tabindex="-1">用户管理 <a class="header-anchor" href="#用户管理" aria-label="Permalink to &quot;用户管理&quot;">​</a></h3><blockquote><p>Useradd 命令。 添加用户</p></blockquote><p>useradd -选项</p><p>-m：自动创建这个用户的主目录 /home/mahongyi</p><blockquote><p>Userdel 删除用户</p></blockquote><p>Userder 选型</p><p>-r：删除目录的同时将他的目录也一并删除</p><blockquote><p>usermod 修改用户</p></blockquote><p>修改用户 usermod 对应修改的内容 修改哪个用户</p><blockquote><p>切换用户</p></blockquote><ol><li>切换用户的命令为：su username [username是你的用户名]</li><li>从普通用户切换到root 用户，还可以使用命令：sudo su</li><li>在终端输入exit或logout或使用快捷方式ctrl+d，可以退回原来用户，其实ctrl+d也是执行的exit命令</li><li>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su -root】</li></ol><p>$表示普通用户</p><p>#表示超级用户，也就是root用户</p><blockquote><p>Hostname 查看主机名， hostname username 修改主机名，修改完毕重新连接即可</p></blockquote><blockquote><p>用户密码设置 passwd mahongyi 回车后会提示密码输入</p></blockquote><p>我们一般通过root创建用户的时候配置密码。</p><p>普通用户修改密码：passwd 回车</p><blockquote><p>锁定用户！</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">passwd</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -l</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> mahongyi</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  #锁定之后这个用户就不能登陆了</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">passwd</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -d</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> mahognyi</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 清除用户密码，没有密码也不能登陆</span></span></code></pre></div><h3 id="用户组管理" tabindex="-1">用户组管理 <a class="header-anchor" href="#用户组管理" aria-label="Permalink to &quot;用户组管理&quot;">​</a></h3><p>属主、属组</p><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理（开发、测试、运维、root）。不同linux系统对用户组的规定有所不同，如linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><blockquote><p>创建用户组 groupadd groupname</p></blockquote><p>创建完用户通过 cat /etc/group 查询组信息，创建完成可以得到一个组的id，这个id时刻以指定的<code>-g 520</code>,若不指定就是自增！</p><blockquote><p>删除用户组 groupdel groupname</p></blockquote><blockquote><p>修改用户组的权限信息和名字 groupmod</p></blockquote><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><blockquote><p>切换组</p></blockquote><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">$</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> newgrp</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> root</span></span></code></pre></div><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。</p><h3 id="文件查看" tabindex="-1">文件查看 <a class="header-anchor" href="#文件查看" aria-label="Permalink to &quot;文件查看&quot;">​</a></h3><blockquote><p>/etc/passwd</p></blockquote><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><p><strong>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</strong></p><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>＃ cat /etc/passwd</span></span>
<span class="line"><span></span></span>
<span class="line"><span>root:x:0:0:Superuser:/:</span></span>
<span class="line"><span>daemon:x:1:1:System daemons:/etc:</span></span>
<span class="line"><span>bin:x:2:2:Owner of system commands:/bin:</span></span>
<span class="line"><span>sys:x:3:3:Owner of system files:/usr/sys:</span></span>
<span class="line"><span>adm:x:4:4:System accounting:/usr/adm:</span></span>
<span class="line"><span>uucp:x:5:5:UUCP administrator:/usr/lib/uucp:</span></span>
<span class="line"><span>auth:x:7:21:Authentication administrator:/tcb/files/auth:</span></span>
<span class="line"><span>cron:x:9:16:Cron daemon:/usr/spool/cron:</span></span>
<span class="line"><span>listen:x:37:4:Network daemon:/usr/net/nls:</span></span>
<span class="line"><span>lp:x:71:18:Printer administrator:/usr/spool/lp:</span></span></code></pre></div><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</span></span></code></pre></div><p>1）&quot;用户名&quot;是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(😃，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着/etc/group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>伪 用 户 含 义</span></span>
<span class="line"><span>bin 拥有可执行的用户命令文件</span></span>
<span class="line"><span>sys 拥有系统文件</span></span>
<span class="line"><span>adm 拥有帐户文件</span></span>
<span class="line"><span>uucp UUCP使用</span></span>
<span class="line"><span>lp lp或lpd子系统使用</span></span>
<span class="line"><span>nobody NFS使用</span></span></code></pre></div><blockquote><p>/etc/group</p></blockquote><p>用户组的所有信息都存放在/etc/group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>组名:口令:组标识号:组内用户列表</span></span></code></pre></div><ol><li>&quot;组名&quot;是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li><li>&quot;口令&quot;字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>&quot;组标识号&quot;与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>&quot;组内用户列表&quot;是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><h3 id="磁盘管理" tabindex="-1">磁盘管理 <a class="header-anchor" href="#磁盘管理" aria-label="Permalink to &quot;磁盘管理&quot;">​</a></h3><blockquote><p>概述</p></blockquote><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><blockquote><p>df</p></blockquote><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>df [-ahikHTm] [目录或文件名]</span></span></code></pre></div><p>选项与参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 将系统内所有的文件系统列出来！</span></span>
<span class="line"><span># 在 Linux 底下如果 df 没有加任何选项</span></span>
<span class="line"><span># 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！</span></span>
<span class="line"><span>[root@kuangshen /]# df</span></span>
<span class="line"><span>Filesystem     1K-blocks   Used Available Use% Mounted on</span></span>
<span class="line"><span>devtmpfs          889100       0    889100   0% /dev</span></span>
<span class="line"><span>tmpfs             899460     704    898756   1% /dev/shm</span></span>
<span class="line"><span>tmpfs             899460     496    898964   1% /run</span></span>
<span class="line"><span>tmpfs             899460       0    899460   0% /sys/fs/cgroup</span></span>
<span class="line"><span>/dev/vda1       41152812 6586736  32662368  17% /</span></span>
<span class="line"><span>tmpfs             179896       0    179896   0% /run/user/0</span></span>
<span class="line"><span># 将容量结果以易读的容量格式显示出来</span></span>
<span class="line"><span>[root@kuangshen /]# df -h</span></span>
<span class="line"><span>Filesystem     Size Used Avail Use% Mounted on</span></span>
<span class="line"><span>devtmpfs       869M     0 869M   0% /dev</span></span>
<span class="line"><span>tmpfs           879M 708K 878M   1% /dev/shm</span></span>
<span class="line"><span>tmpfs           879M 496K 878M   1% /run</span></span>
<span class="line"><span>tmpfs           879M     0 879M   0% /sys/fs/cgroup</span></span>
<span class="line"><span>/dev/vda1       40G  6.3G   32G  17% /</span></span>
<span class="line"><span>tmpfs           176M     0 176M   0% /run/user/0</span></span>
<span class="line"><span># 将系统内的所有特殊文件格式及名称都列出来</span></span>
<span class="line"><span>[root@kuangshen /]# df -aT</span></span>
<span class="line"><span>Filesystem     Type       1K-blocks   Used Available Use% Mounted on</span></span>
<span class="line"><span>sysfs         sysfs               0       0         0    - /sys</span></span>
<span class="line"><span>proc           proc                0       0         0    - /proc</span></span>
<span class="line"><span>devtmpfs       devtmpfs       889100       0    889100   0% /dev</span></span>
<span class="line"><span>securityfs     securityfs          0       0         0    - /sys/kernel/security</span></span>
<span class="line"><span>tmpfs         tmpfs          899460     708    898752   1% /dev/shm</span></span>
<span class="line"><span>devpts         devpts              0       0         0    - /dev/pts</span></span>
<span class="line"><span>tmpfs         tmpfs          899460     496    898964   1% /run</span></span>
<span class="line"><span>tmpfs         tmpfs          899460       0    899460   0% /sys/fs/cgroup</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/systemd</span></span>
<span class="line"><span>pstore         pstore              0       0         0    - /sys/fs/pstore</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/freezer</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpuset</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/hugetlb</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/blkio</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/net_cls,net_prio</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/memory</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/pids</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/cpu,cpuacct</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/devices</span></span>
<span class="line"><span>cgroup         cgroup              0       0         0    - /sys/fs/cgroup/perf_event</span></span>
<span class="line"><span>configfs       configfs            0       0         0    - /sys/kernel/config</span></span>
<span class="line"><span>/dev/vda1     ext4         41152812 6586748  32662356  17% /</span></span>
<span class="line"><span>systemd-1      -                   -       -         -    - /proc/sys/fs/binfmt_misc</span></span>
<span class="line"><span>mqueue         mqueue              0       0         0    - /dev/mqueue</span></span>
<span class="line"><span>debugfs       debugfs             0       0         0    - /sys/kernel/debug</span></span>
<span class="line"><span>hugetlbfs     hugetlbfs           0       0         0    - /dev/hugepages</span></span>
<span class="line"><span>tmpfs         tmpfs          179896       0    179896   0% /run/user/0</span></span>
<span class="line"><span>binfmt_misc   binfmt_misc         0       0         0    - /proc/sys/fs/binfmt_misc</span></span>
<span class="line"><span># 将 /etc 底下的可用的磁盘容量以易读的容量格式显示</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[root@kuangshen /]# df -h /etc</span></span>
<span class="line"><span>Filesystem     Size Used Avail Use% Mounted on</span></span>
<span class="line"><span>/dev/vda1       40G  6.3G   32G  17% /</span></span></code></pre></div><blockquote><p>du</p></blockquote><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>du [-ahskm] 文件或目录名称</span></span></code></pre></div><p>选项与参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:</span></span>
<span class="line"><span># 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。</span></span>
<span class="line"><span>[root@kuangshen home]# du</span></span>
<span class="line"><span>16./redis</span></span>
<span class="line"><span>8./www/.oracle_jre_usage  # 包括隐藏文件的目录</span></span>
<span class="line"><span>24./www</span></span>
<span class="line"><span>48.                        # 这个目录(.)所占用的总量</span></span>
<span class="line"><span># 将文件的容量也列出来</span></span>
<span class="line"><span>[root@kuangshen home]# du -a</span></span>
<span class="line"><span>4./redis/.bash_profile</span></span>
<span class="line"><span>4./redis/.bash_logout    </span></span>
<span class="line"><span>....中间省略....</span></span>
<span class="line"><span>4./kuangstudy.txt # 有文件的列表了</span></span>
<span class="line"><span>48.</span></span>
<span class="line"><span># 检查根目录底下每个目录所占用的容量</span></span>
<span class="line"><span>[root@kuangshen home]# du -sm /*</span></span>
<span class="line"><span>0/bin</span></span>
<span class="line"><span>146/boot</span></span>
<span class="line"><span>.....中间省略....</span></span>
<span class="line"><span>0/proc</span></span>
<span class="line"><span>.....中间省略....</span></span>
<span class="line"><span>1/tmp</span></span>
<span class="line"><span>3026/usr  # 系统初期最大就是他了啦！</span></span>
<span class="line"><span>513/var</span></span>
<span class="line"><span>2666/www</span></span></code></pre></div><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><blockquote><p>磁盘挂载与卸除</p></blockquote><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”</p><p>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。</p><p>磁盘挂载语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点</span></span></code></pre></div><p>测试：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span># 将 /dev/hdc6 挂载到 /mnt/hdc6 上面！</span></span>
<span class="line"><span>[root@www ~]# mkdir /mnt/hdc6</span></span>
<span class="line"><span>[root@www ~]# mount /dev/hdc6 /mnt/hdc6</span></span>
<span class="line"><span>[root@www ~]# df</span></span>
<span class="line"><span>Filesystem           1K-blocks     Used Available Use% Mounted on</span></span>
<span class="line"><span>/dev/hdc6              1976312     42072   1833836   3% /mnt/hdc6</span></span></code></pre></div><p>磁盘卸载命令 umount 语法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>umount [-fn] 装置文件名或挂载点</span></span></code></pre></div><p>选项与参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span>[root@www ~]# umount /dev/hdc6</span></span></code></pre></div><h3 id="进程管理" tabindex="-1">进程管理 <a class="header-anchor" href="#进程管理" aria-label="Permalink to &quot;进程管理&quot;">​</a></h3><blockquote><p>什么是进程</p></blockquote><p>1.在linux中，每一程序都有一个进程，每一个进程都有一个id号</p><p>2.每一个进程都有一个父进程</p><p>3.进程可以有两种存在方式，前台！后台运行！</p><p>4.一般的话服务都是后台运行的，基本的程序都是前台运行的。</p><blockquote><p>命令</p></blockquote><p><strong>ps</strong>查看当前系统中正在执行的各种进程的信息！</p><ul><li>-a 显示当前终端运行的所有进程信息</li><li>-u：以用户的信息显示进程</li><li>-x：显示后台运行进程的参数</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># ps -aux 查看所有的进程</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">ps</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -aux</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">|</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">grep</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> mysql</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># | 在linux这个叫做管道符</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># grep 查找文件中符合条件的字符串！</span></span></code></pre></div><p>对于我们来说，这里目前我们只需要记住一个命令即可 ps -xx｜grep 进程名字！过滤进程信息！</p><p>ps -ef ：可以查看到父进程信息</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">ps</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> -ef</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">|</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">grep</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> mysql</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> # 看父进程我们一般可以通过目录树结构来查看！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"># 进程树</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">pstree</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> -p</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> 显示父id</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> -u</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> 显示用户组</span></span></code></pre></div><p>结束进程：</p><p>kill -9 进程id 强制结束进程</p>`,305)])])}const k=a(t,[["render",o]]);export{g as __pageData,k as default};
