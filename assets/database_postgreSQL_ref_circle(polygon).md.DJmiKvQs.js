import{_ as a,c as e,o as i,b3 as l}from"./chunks/framework.CatkIGlB.js";const g=JSON.parse('{"title":"PostgreSQL circle(polygon) 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/circle(polygon).md","filePath":"database/postgreSQL/ref/circle(polygon).md","lastUpdated":1690352360000}'),t={name:"database/postgreSQL/ref/circle(polygon).md"};function o(n,s,p,c,r,h){return i(),e("div",null,[...s[0]||(s[0]=[l('<h1 id="postgresql-circle-polygon-函数" tabindex="-1">PostgreSQL circle(polygon) 函数 <a class="header-anchor" href="#postgresql-circle-polygon-函数" aria-label="Permalink to &quot;PostgreSQL circle(polygon) 函数&quot;">​</a></h1><p>PostgreSQL <code>circle(polygon)</code> 函数将指定的多边形转为圆形。圆的中心是多边形点位置的平均值，半径是多边形点到该中心的平均距离。</p><h2 id="circle-polygon-语法" tabindex="-1"><code>circle(polygon)</code> 语法 <a class="header-anchor" href="#circle-polygon-语法" aria-label="Permalink to &quot;`circle(polygon)` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>circle(polygon)</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">circle</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">polygon</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> circle</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>polygon</code></em></p><p>必需的。 一个多边形。比如： <code>polygon &#39;((0,0),(1,3),(2,0))&#39;</code>。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>circle(polygon)</code> 函数返回一个从指定的多边形转换来的圆形。</p><h2 id="circle-polygon-示例" tabindex="-1"><code>circle(polygon)</code> 示例 <a class="header-anchor" href="#circle-polygon-示例" aria-label="Permalink to &quot;`circle(polygon)` 示例&quot;">​</a></h2><p>下面的语句示例展示了如何使用 PostgreSQL <code>circle(polygon)</code> 函数返回包围矩形 <code>polygon &#39;((0,0),(1,3),(2,0))&#39;</code> 的最小的圆形。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> circle</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">polygon</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">((0,0),(1,3),(2,0))</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">           circle</span></span>\n<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">----------------------------</span></span>\n<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;(</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">1,1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">,1.6094757082487299</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span></code></pre></div>',13)])])}const k=a(t,[["render",o]]);export{g as __pageData,k as default};
