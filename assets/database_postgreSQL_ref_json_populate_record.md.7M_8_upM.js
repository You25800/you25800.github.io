import{_ as i,c as a,o as e,b3 as t}from"./chunks/framework.CatkIGlB.js";const c=JSON.parse('{"title":"PostgreSQL json_populate_record() 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/json_populate_record.md","filePath":"database/postgreSQL/ref/json_populate_record.md","lastUpdated":1690180485000}'),p={name:"database/postgreSQL/ref/json_populate_record.md"};function n(l,s,h,k,o,d){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="postgresql-json-populate-record-函数" tabindex="-1">PostgreSQL json_populate_record() 函数 <a class="header-anchor" href="#postgresql-json-populate-record-函数" aria-label="Permalink to &quot;PostgreSQL json\\_populate\\_record() 函数&quot;">​</a></h1><p>PostgreSQL <code>json_populate_record()</code> 函数将指定的最顶层的 JSON 对象转为一个自定义的 SQL 类型值。</p><h2 id="json-populate-record-语法" tabindex="-1"><code>json_populate_record()</code> 语法 <a class="header-anchor" href="#json-populate-record-语法" aria-label="Permalink to &quot;\`json_populate_record()\` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>json_populate_record()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">json_populate_record(base ANYELEMENT, from_json </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">JSON</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> ANYELEMENT</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>base</code></em></p><p>必需的。 一个任何数据类型的值。 它指明了 JSON 对象要转为的值的类型。</p></li><li><p><em><code>from_json</code></em></p><p>必需的。 要转的 JSON 对象。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>json_populate_record()</code> 函数返回一个指定的的 SQL 类型值，它由指定的 JSON 对象转化而来。</p><p>在 JSON 对象的那些与自定义类型中的列名匹配的字段，他们的值将被插入到对应的输出的列中。而 JSON 对象中的那些没有匹配到自定类型中的列名的字段将会被忽略。</p><p><code>json_populate_record()</code> 函数按照如下的规则的将 JSON 值转为 SQL 类型的值：</p><ol><li>JSON null 将被转为 SQL null。</li><li>如果输出列的类型为 <code>JSON</code> 或者 <code>JSONB</code>，JSON 值将被精确的复制。</li><li>如果输出列是组合类型，并且 JSON 值是对象，则通过递归应用这些规则，将对象的字段转换为输出行类型的列。</li><li>如果输出列是数组类型并且 JSON 值是 JSON 数组，则通过递归应用这些规则，将 JSON 数组的元素转换为输出数组的元素。</li><li>否则，如果 JSON 值是字符串，则将字符串的内容将被送到该列数据类型对应的输入转换函数。</li><li>否则，JSON 值的普通文本表示将被送到该列数据类型的输入转换函数。</li></ol><p>在典型使用中，<code>base</code> 的值为 <code>NULL</code>，这意味着任何不与 JSON 对象中的字段匹配的输出列都将用空值填充。 如果 <code>base</code> 的值不为 <code>NULL</code>，则它包含的值将被用于不匹配的列中。</p><p>通常，我们可以使用 <code>CREATE TYPE</code> 创建一个自定义类型，它定义了要输出的列以及每个列的类型。</p><h2 id="json-populate-record-示例" tabindex="-1"><code>json_populate_record()</code> 示例 <a class="header-anchor" href="#json-populate-record-示例" aria-label="Permalink to &quot;\`json_populate_record()\` 示例&quot;">​</a></h2><p>本示例展示了如何使用 PostgreSQL <code>json_populate_record()</code> 函数将一个 JSON 对象转为一个自定义 SQL 类型的值。</p><p>首先，让我们创建两个自定义的 SQL 类型：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> address</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> as</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (country </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, city </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> TYPE</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> person</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> as</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">name</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, age </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">INT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, hobbies </span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">TEXT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[], </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">address</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> address</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">);</span></span></code></pre></div><p>这里，我们创建了两个自定类型 <code>address</code> 和 <code>person</code>，其中 <code>person</code> 内部使用了 <code>address</code>。</p><p>然后，让我们使用下面的语句将 JSON 对象转为刚刚创建的类型 <code>person</code>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_populate_record(</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">    null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">::person,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;hobbies&quot;: [&quot;sports&quot;, &quot;cars&quot;], &quot;address&quot;: {&quot;country&quot;: &quot;CN&quot;, &quot;city&quot;: &quot;BeiJing&quot;}}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  );</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> age</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">    hobbies</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">   address</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">------+-----+---------------+--------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">  20</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> {</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">sports,cars}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">CN,BeiJing</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><p>我们可以使用一个不为 NULL 的 <code>base</code> 参数，以便未输出中的未匹配的列填充一个值，比如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  *</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">FROM</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  json_populate_record(</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">x</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">ARRAY</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[&#39;sports&#39;], (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">CN</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">BeiJing</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">))::person,</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 20, &quot;hobbies&quot;: [&quot;sports&quot;, &quot;cars&quot;]}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  );</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> age</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">    hobbies</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">   address</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">------+-----+---------------+--------------</span></span>
<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Tom</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">  |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">  20</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> {</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">sports,cars}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">CN,BeiJing</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span></span></code></pre></div><p>这里，我们的 <code>base</code> 参数为 <code>(&#39;x&#39;, 0, ARRAY[&#39;sports&#39;], (&#39;CN&#39;, &#39;BeiJing&#39;))::person</code>，其中 <code>address</code> 列的值为 <code>(&#39;CN&#39;, &#39;BeiJing&#39;)</code>。 虽然给定的 JSON 对象中没有 <code>address</code> 字段，但是输出中的列 <code>address</code> 被 <code>base</code> 参数中的值填充。</p>`,26)])])}const D=i(p,[["render",n]]);export{c as __pageData,D as default};
