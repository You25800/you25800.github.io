import{_ as i,c as a,o as t,b3 as n}from"./chunks/framework.CatkIGlB.js";const g=JSON.parse('{"title":"JSX","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/JSX.md","filePath":"vue/typescript/JSX.md","lastUpdated":1694392708000}'),h={name:"vue/typescript/JSX.md"};function l(k,s,p,e,D,r){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p><a href="https://facebook.github.io/jsx/" target="_blank" rel="noreferrer">JSX</a>是一种嵌入式的类似XML的语法。 它可以被转换成合法的JavaScript，尽管转换的语义是依据不同的实现而定的。 JSX因<a href="https://reactjs.org/" target="_blank" rel="noreferrer">React</a>框架而流行，但也存在其它的实现。 TypeScript支持内嵌，类型检查以及将JSX直接编译为JavaScript。</p><h2 id="基本用法" tabindex="-1">基本用法 <a class="header-anchor" href="#基本用法" aria-label="Permalink to &quot;基本用法&quot;">​</a></h2><p>想要使用JSX必须做两件事：</p><ol><li>给文件一个<code>.tsx</code>扩展名</li><li>启用<code>jsx</code>选项</li></ol><p>TypeScript具有三种JSX模式：<code>preserve</code>，<code>react</code>和<code>react-native</code>。这些模式只在代码生成阶段起作用-类型检查并不受影响。在<code>preserve</code>模式下生成代码中会保留JSX以供后续的转换操作使用（比如：<a href="https://babeljs.io/" target="_blank" rel="noreferrer">Babel</a>）。另外，输出文件会带有<code>.jsx</code>扩展名。<code>react</code>模式会生成<code>React.createElement</code>，在使用前不需要再进行转换操作了，输出文件的扩展名为<code>.js</code>。<code>react-native</code>相当于<code>preserve</code>，它也保留了所有的JSX，但是输出文件的扩展名是<code>.js</code>。</p><table tabindex="0"><thead><tr><th>模式</th><th>输入</th><th>输出</th><th>输出文件扩展名</th></tr></thead><tbody><tr><td>preserve</td><td><code>&lt;div /&gt;</code></td><td><code>&lt;div /&gt;</code></td><td>.jsx</td></tr><tr><td>react</td><td><code>&lt;div /&gt;</code></td><td>React.createElement(&quot;div&quot;)</td><td>.js</td></tr><tr><td>react-native</td><td><code>&lt;div /&gt;</code></td><td><code>&lt;div /&gt;</code></td><td>.js</td></tr></tbody></table><p>你可以通过在命令行里用<code>--jsx</code>标记或<code>tsconfig.json</code>里的选项来指定模式。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>React 标识符是写死的硬编码，所以你必须保证React（大写的R）是可用的。</p></div><h2 id="as操作符" tabindex="-1"><code>as</code>操作符 <a class="header-anchor" href="#as操作符" aria-label="Permalink to &quot;\`as\`操作符&quot;">​</a></h2><p>回想一下怎么写类型断言：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> foo </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">foo</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>这里断言<code>bar</code>变量是<code>foo</code>类型的。因为TypeScript也使用尖括号来表示类型断言，在结合JSX的语法后将带来解析上的困难。因此，TypeScript在<code>.tsx</code>文件里禁用了使用尖括号的类型断言。</p><p>由于不能够在<code>.tsx</code>文件里使用上述语法，因此我们应该使用另一个类型断言操作符：<code>as</code>。 上面的例子可以很容易地使用<code>as</code>操作符改写：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> foo </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> bar </span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">as</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p><code>as</code>操作符在<code>.ts</code>和<code>.tsx</code>里都可用，并且与尖括号类型断言行为是等价的。</p><h2 id="类型检查" tabindex="-1">类型检查 <a class="header-anchor" href="#类型检查" aria-label="Permalink to &quot;类型检查&quot;">​</a></h2><p>为了理解JSX的类型检查，你必须首先理解固有元素与基于值的元素之间的区别。 假设有这样一个JSX表达式<code>&lt;expr /&gt;</code>，<code>expr</code>可能引用环境自带的某些东西（比如，在DOM环境里的<code>div</code>或<code>span</code>）或者是你自定义的组件。 这是非常重要的，原因有如下两点：</p><ol><li>对于React，固有元素会生成字符串（<code>React.createElement(&quot;div&quot;)</code>），然而由你自定义的组件却不会生成（<code>React.createElement(MyComponent)</code>）。</li><li>传入JSX元素里的属性类型的查找方式不同。 固有元素属性<em>本身</em>就支持，然而自定义的组件会自己去指定它们具有哪个属性。</li></ol><p>TypeScript使用<a href="http://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components" target="_blank" rel="noreferrer">与React相同的规范</a> 来区别它们。 固有元素总是以一个小写字母开头，基于值的元素总是以一个大写字母开头。</p><h3 id="固有元素" tabindex="-1">固有元素 <a class="header-anchor" href="#固有元素" aria-label="Permalink to &quot;固有元素&quot;">​</a></h3><p>固有元素使用特殊的接口<code>JSX.IntrinsicElements</code>来查找。 默认地，如果这个接口没有指定，会全部通过，不对固有元素进行类型检查。 然而，如果这个接口存在，那么固有元素的名字需要在<code>JSX.IntrinsicElements</code>接口的属性里查找。 例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> IntrinsicElements</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">        foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">bar </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误</span></span></code></pre></div><p>在上例中，<code>&lt;foo /&gt;</code>没有问题，但是<code>&lt;bar /&gt;</code>会报错，因为它没在<code>JSX.IntrinsicElements</code>里指定。</p><blockquote><p>注意：你也可以在<code>JSX.IntrinsicElements</code>上指定一个用来捕获所有字符串索引：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> IntrinsicElements</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">        [</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">elemName</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div></blockquote><h3 id="基于值的元素" tabindex="-1">基于值的元素 <a class="header-anchor" href="#基于值的元素" aria-label="Permalink to &quot;基于值的元素&quot;">​</a></h3><p>基于值的元素会简单的在它所在的作用域里按标识符查找。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> MyComponent </span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">from</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">./myComponent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">                                </span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">MyComponent </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">SomeOtherComponent </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误</span></span></code></pre></div><p>有两种方式可以定义基于值的元素：</p><ol><li>无状态函数组件 (SFC)</li><li>类组件</li></ol><p>由于这两种基于值的元素在JSX表达式里无法区分，因此TypeScript首先会尝试将表达式做为无状态函数组件进行解析。如果解析成功，那么TypeScript就完成了表达式到其声明的解析操作。如果按照无状态函数组件解析失败，那么TypeScript会继续尝试以类组件的形式进行解析。如果依旧失败，那么将输出一个错误。</p><h4 id="无状态函数组件" tabindex="-1">无状态函数组件 <a class="header-anchor" href="#无状态函数组件" aria-label="Permalink to &quot;无状态函数组件&quot;">​</a></h4><p>正如其名，组件被定义成JavaScript函数，它的第一个参数是<code>props</code>对象。 TypeScript会强制它的返回值可以赋值给<code>JSX.Element</code>。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> FooProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    X</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    Y</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> AnotherComponent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">});</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> ComponentFoo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> FooProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">AnotherComponent</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> name</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> /&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> Button </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">value</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">},</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> context</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> color</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> })</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">button</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><p>由于无状态函数组件是简单的JavaScript函数，所以我们还可以利用函数重载。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ClickableProps</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">|</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> HomeProps</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ClickableProps</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    home</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> SideProps</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ClickableProps</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    side</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> |</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> MainButton</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> HomeProps</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">):</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> MainButton</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> SideProps</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">):</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><h4 id="类组件" tabindex="-1">类组件 <a class="header-anchor" href="#类组件" aria-label="Permalink to &quot;类组件&quot;">​</a></h4><p>我们可以定义类组件的类型。 然而，我们首先最好弄懂两个新的术语：<em>元素类的类型</em>和<em>元素实例的类型</em>。</p><p>现在有<code>&lt;Expr /&gt;</code>，<em>元素类的类型</em>为<code>Expr</code>的类型。 所以在上面的例子里，如果<code>MyComponent</code>是ES6的类，那么类类型就是类的构造函数和静态部分。 如果<code>MyComponent</code>是个工厂函数，类类型为这个函数。</p><p>一旦建立起了类类型，实例类型由类构造器或调用签名（如果存在的话）的返回值的联合构成。 再次说明，在ES6类的情况下，实例类型为这个类的实例的类型，并且如果是工厂函数，实例类型为这个函数返回值类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> MyComponent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 使用构造签名</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> myComponent </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> MyComponent</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 元素类的类型 =&gt; MyComponent</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 元素实例的类型 =&gt; { render: () =&gt; void }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> MyFactoryFunction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">    render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 使用调用签名</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> myComponent </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> MyFactoryFunction</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 元素类的类型 =&gt; FactoryFunction</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// 元素实例的类型 =&gt; { render: () =&gt; void }</span></span></code></pre></div><p>元素的实例类型很有趣，因为它必须赋值给<code>JSX.ElementClass</code>或抛出一个错误。 默认的<code>JSX.ElementClass</code>为<code>{}</code>，但是它可以被扩展用来限制JSX的类型以符合相应的接口。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ElementClass</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> MyComponent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> MyFactoryFunction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> ()</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">MyComponent </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">MyFactoryFunction </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> NotAValidComponent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> NotAValidFactoryFunction</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">NotAValidComponent </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">NotAValidFactoryFunction </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误</span></span></code></pre></div><h3 id="属性类型检查" tabindex="-1">属性类型检查 <a class="header-anchor" href="#属性类型检查" aria-label="Permalink to &quot;属性类型检查&quot;">​</a></h3><p>属性类型检查的第一步是确定<em>元素属性类型</em>。 这在固有元素和基于值的元素之间稍有不同。</p><p>对于固有元素，这是<code>JSX.IntrinsicElements</code>属性的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> IntrinsicElements</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">?:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> boolean</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// \`foo\`的元素属性类型为\`{bar?: boolean}\`</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo bar </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span></span></code></pre></div><p>对于基于值的元素，就稍微复杂些。 它取决于先前确定的在元素实例类型上的某个属性的类型。 至于该使用哪个属性来确定类型取决于<code>JSX.ElementAttributesProperty</code>。 它应该使用单一的属性来定义。 这个属性名之后会被使用。 TypeScript 2.8，如果未指定<code>JSX.ElementAttributesProperty</code>，那么将使用类元素构造函数或SFC调用的第一个参数的类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ElementAttributesProperty</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 指定用来使用的属性名</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> MyComponent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">    // 在元素实例类型上指定属性</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">?:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// \`MyComponent\`的元素属性类型为\`{foo?: string}\`</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">MyComponent foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> /&gt;</span></span></code></pre></div><p>元素属性类型用于的JSX里进行属性的类型检查。 支持可选属性和必须属性。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> IntrinsicElements</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> optionalProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">?:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> number</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> optionalProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">={</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误, 缺少 requiredProp</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">={</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误, requiredProp 应该是字符串</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> unknownProp </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误, unknownProp 不存在</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> some</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">unknown</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">prop </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确, \`some-unknown-prop\`不是个合法的标识符</span></span></code></pre></div><blockquote><p>注意：如果一个属性名不是个合法的JS标识符（像<code>data-*</code>属性），并且它没出现在元素属性类型里时不会当做一个错误。</p></blockquote><p>另外，JSX还会使用<code>JSX.IntrinsicAttributes</code>接口来指定额外的属性，这些额外的属性通常不会被组件的props或arguments使用 - 比如React里的<code>key</code>。还有，<code>JSX.IntrinsicClassAttributes&lt;T&gt;</code>泛型类型也可以用来做同样的事情。这里的泛型参数表示类实例类型。在React里，它用来允许<code>Ref&lt;T&gt;</code>类型上的<code>ref</code>属性。通常来讲，这些接口上的所有属性都是可选的，除非你想要用户在每个JSX标签上都提供一些属性。</p><p>延展操作符也可以使用：</p><div class="language-JSX vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSX</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> props </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> requiredProp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> };</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {...</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">} /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> badProps </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {};</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {...</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">badProps</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">} /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误</span></span></code></pre></div><h3 id="子孙类型检查" tabindex="-1">子孙类型检查 <a class="header-anchor" href="#子孙类型检查" aria-label="Permalink to &quot;子孙类型检查&quot;">​</a></h3><p>从TypeScript 2.3开始，我们引入了<em>children</em>类型检查。<em>children</em>是<em>元素属性(attribute)类型</em>的一个特殊属性(property)，子<em>JSXExpression</em>将会被插入到属性里。 与使用<code>JSX.ElementAttributesProperty</code>来决定<em>props</em>名类似，我们可以利用<code>JSX.ElementChildrenAttribute</code>来决定<em>children</em>名。 <code>JSX.ElementChildrenAttribute</code>应该被声明在单一的属性(property)里。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> namespace</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">    interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> ElementChildrenAttribute</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {};</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // specify children name to use</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>如不特殊指定子孙的类型，我们将使用<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react" target="_blank" rel="noreferrer">React typings</a>里的默认类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    World</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> CustomComp </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">CustomComp</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello World</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">This is just a JS expression...</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> +</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1000</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">CustomComp</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> PropsType</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> JSX</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Element</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    name</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Component</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> React</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Component</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">PropsType</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">        return</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> (</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">            &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h2</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">            {</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">.</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">.</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">children</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">            &lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">        )</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// OK</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Component</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello World</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Component</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Error: children is of type JSX.Element not array of JSX.Element</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Component</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello World</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h2</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello World</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Component</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Error: children is of type JSX.Element not array of JSX.Element or string.</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Component</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">h1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">&gt;Hello</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">h1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    World</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Component</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="jsx结果类型" tabindex="-1">JSX结果类型 <a class="header-anchor" href="#jsx结果类型" aria-label="Permalink to &quot;JSX结果类型&quot;">​</a></h2><p>默认地JSX表达式结果的类型为<code>any</code>。 你可以自定义这个类型，通过指定<code>JSX.Element</code>接口。 然而，不能够从接口里检索元素，属性或JSX的子元素的类型信息。 它是一个黑盒。</p><h2 id="嵌入的表达式" tabindex="-1">嵌入的表达式 <a class="header-anchor" href="#嵌入的表达式" aria-label="Permalink to &quot;嵌入的表达式&quot;">​</a></h2><p>JSX允许你使用<code>{ }</code>标签来内嵌表达式。</p><div class="language-JSX vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSX</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> a </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">map</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">i</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">span</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;{</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}&lt;/</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">span</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><p>上面的代码产生一个错误，因为你不能用数字来除以一个字符串。 输出如下，若你使用了<code>preserve</code>选项：</p><div class="language-JSX vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JSX</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> a </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    {</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">map</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">i</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> return</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &lt;</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">span</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;{</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">i </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">/</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}&lt;/</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">span</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> }</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;/</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="react整合" tabindex="-1">React整合 <a class="header-anchor" href="#react整合" aria-label="Permalink to &quot;React整合&quot;">​</a></h2><p>要想一起使用JSX和React，你应该使用<a href="https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react" target="_blank" rel="noreferrer">React类型定义</a>。 这些类型声明定义了<code>JSX</code>合适命名空间来使用React。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">/// </span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#E53935;--shiki-light-font-style:italic;--shiki-dark:#F07178;--shiki-dark-font-style:italic;">reference</span><span style="--shiki-light:#9C3EDA;--shiki-light-font-style:italic;--shiki-dark:#C792EA;--shiki-dark-font-style:italic;"> path</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">&quot;</span><span style="--shiki-light:#91B859;--shiki-light-font-style:italic;--shiki-dark:#C3E88D;--shiki-dark-font-style:italic;">react.d.ts</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> string</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">class</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> MyComponent</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> React</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Component</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">Props</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {}&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">    render</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">    return</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">span</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">this.props.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}&lt;/</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">span</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">MyComponent foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 正确</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&lt;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">MyComponent foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">={</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> /&gt;;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // 错误</span></span></code></pre></div><h2 id="工厂函数" tabindex="-1">工厂函数 <a class="header-anchor" href="#工厂函数" aria-label="Permalink to &quot;工厂函数&quot;">​</a></h2><p><code>jsx: react</code>编译选项使用的工厂函数是可以配置的。可以使用<code>jsxFactory</code>命令行选项，或内联的<code>@jsx</code>注释指令在每个文件上设置。比如，给<code>createElement</code>设置<code>jsxFactory</code>，<code>&lt;div /&gt;</code>会使用<code>createElement(&quot;div&quot;)</code>来生成，而不是<code>React.createElement(&quot;div&quot;)</code>。</p><p>注释指令可以像下面这样使用（在TypeScript 2.8里）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">import</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> preact </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;"> require</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">preact</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">/* @jsx preact.h */</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> &lt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">div</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> /&gt;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>生成：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> preact </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> require</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">preact</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> preact</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">h</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">div</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span></code></pre></div><p>工厂函数的选择同样会影响<code>JSX</code>命名空间的查找（类型检查）。如果工厂函数使用<code>React.createElement</code>定义（默认），编译器会先检查<code>React.JSX</code>，之后才检查全局的<code>JSX</code>。如果工厂函数定义为<code>h</code>，那么在检查全局的<code>JSX</code>之前先检查<code>h.JSX</code>。</p>`,78)])])}const F=i(h,[["render",l]]);export{g as __pageData,F as default};
