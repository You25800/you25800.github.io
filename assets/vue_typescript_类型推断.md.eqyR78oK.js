import{_ as i,c as a,o as t,b3 as n}from"./chunks/framework.CatkIGlB.js";const A=JSON.parse('{"title":"类型推断","description":"","frontmatter":{},"headers":[],"relativePath":"vue/typescript/类型推断.md","filePath":"vue/typescript/类型推断.md","lastUpdated":1692608566000}'),h={name:"vue/typescript/类型推断.md"};function l(e,s,k,p,d,r){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="类型推断" tabindex="-1">类型推断 <a class="header-anchor" href="#类型推断" aria-label="Permalink to &quot;类型推断&quot;">​</a></h1><p>在 TypeScript 中，有几个地方在没有显式类型注释的情况下使用类型推断来提供类型信息。例如，在这段代码中</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">   </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// let x: number</span></span></code></pre></div><p>变量的类型<code>x</code>被推断为<code>number</code>。这种推理发生在初始化变量和成员、设置参数默认值以及确定函数返回类型时。</p><p>在大多数情况下，类型推断很简单。在下面的部分中，我们将探讨如何推断类型的一些细微差别。</p><h2 id="最佳通用型" tabindex="-1">最佳通用型 <a class="header-anchor" href="#最佳通用型" aria-label="Permalink to &quot;最佳通用型&quot;">​</a></h2><p>当从多个表达式进行类型推断时，这些表达式的类型用于计算“最佳公共类型”。例如，</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> x </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">0</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> 1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> null</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">   </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// let x: (number | null)[]</span></span></code></pre></div><p>要推断上例中 的类型<code>x</code>，我们必须考虑每个数组元素的类型。这里我们对数组的类型有两种选择：<code>number</code>和<code>null</code>。最佳通用类型算法会考虑每个候选类型，并选择与所有其他候选类型兼容的类型。</p><p>由于必须从提供的候选类型中选择最佳公共类型，因此在某些情况下类型共享公共结构，但没有一种类型是所有候选类型的超类型。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> zoo </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Rhino</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Elephant</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Snake</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// let zoo: (Rhino | Elephant | Snake)[]</span></span></code></pre></div><p>理想情况下，我们可能希望<code>zoo</code>被推断为 an ，但由于数组中<code>Animal[]</code>没有严格类型的对象，因此我们不对数组元素类型进行推断。<code>Animal</code>要纠正此问题，请在没有一种类型是所有其他候选类型的超类型时显式提供类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> zoo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> [</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Rhino</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Elephant</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Snake</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">()]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">    </span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">let</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> zoo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[]</span></span></code></pre></div><p>当未找到最佳通用类型时，得出的推断是联合数组类型<code>(Rhino | Elephant | Snake)[]</code>。</p><h2 id="上下文打字" tabindex="-1">上下文打字 <a class="header-anchor" href="#上下文打字" aria-label="Permalink to &quot;上下文打字&quot;">​</a></h2><p>在某些情况下，类型推断在 TypeScript 中也适用于“另一个方向”。这称为“上下文打字”。当表达式的类型由其位置隐含时，就会发生上下文类型化。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">window</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">onmousedown</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">mouseEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">mouseEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">button</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">mouseEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">kangaroo</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Property &#39;kangaroo&#39; does not exist on type &#39;MouseEvent&#39;.Property &#39;kangaroo&#39; does not exist on type &#39;MouseEvent&#39;.</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><p>在这里，TypeScript 类型检查器使用函数的类型<code>Window.onmousedown</code>来推断赋值右侧函数表达式的类型。当它这样做时，它能够推断出参数的<a href="https://developer.mozilla.org/docs/Web/API/MouseEvent" target="_blank" rel="noreferrer">类型</a><code>mouseEvent</code>，该参数确实包含<code>button</code>属性，但不包含<code>kangaroo</code>属性。</p><p>这是有效的，因为 window 已经<code>onmousedown</code>在其类型中声明了：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Declares there is a global variable called &#39;window&#39;</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">declare</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> var</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> window</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Window</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &amp;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> typeof</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> globalThis</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Which is declared as (simplified):</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Window</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> extends</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> GlobalEventHandlers</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">// Which defines a lot of known handler events</span></span>
<span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">interface</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> GlobalEventHandlers</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">  onmousedown</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">(</span><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> GlobalEventHandlers</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;"> ev</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> MouseEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> =&gt;</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">|</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> null</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>TypeScript 足够智能，可以推断其他上下文中的类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">window</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">onscroll</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">uiEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">uiEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">button</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Property</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">button</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> does</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> not</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> exist</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> on</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> type</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Event</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">Property</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">button</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> does</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> not</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> exist</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> on</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> type</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">Event</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><p>基于上述函数被分配给 的事实<code>Window.onscroll</code>，TypeScript 知道这<code>uiEvent</code>是一个<a href="https://developer.mozilla.org/docs/Web/API/UIEvent" target="_blank" rel="noreferrer">UIEvent</a>，而不是像前面的示例那样的<a href="https://developer.mozilla.org/docs/Web/API/MouseEvent" target="_blank" rel="noreferrer">MouseEvent 。</a><code>UIEvent</code>对象不包含<code>button</code>属性，因此 TypeScript 会抛出错误。</p><p>如果此函数不在上下文类型位置，则该函数的参数将隐式具有 type <code>any</code>，并且不会发出错误（除非您使用该<a href="https://www.typescriptlang.org/tsconfig#noImplicitAny" target="_blank" rel="noreferrer"><code>noImplicitAny</code></a>选项）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">const</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> handler </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">=</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">uiEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">uiEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">button</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // &lt;- OK</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><p>我们还可以显式地向函数的参数提供类型信息以覆盖任何上下文类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">window</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">onscroll</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> =</span><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;"> function</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> (</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#BABED8;--shiki-dark-font-style:italic;">uiEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">:</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> any</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">  console</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;">log</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">(</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">uiEvent</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">.</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">button</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">)</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span><span style="--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic;"> // &lt;- Now, no error is given</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">};</span></span></code></pre></div><p>但是，此代码将记录<code>undefined</code>，因为<code>uiEvent</code>没有名为 的属性<code>button</code>。</p><p>上下文类型适用于许多情况。常见情况包括函数调用的参数、赋值的右侧、类型断言、对象和数组文字的成员以及返回语句。上下文类型还充当最佳常见类型中的候选类型。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#9C3EDA;--shiki-dark:#C792EA;">function</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> createZoo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">():</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;"> Animal</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">[] </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">{</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic;">  return</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;"> [</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Rhino</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Elephant</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">()</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> new</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> Snake</span><span style="--shiki-light:#E53935;--shiki-dark:#F07178;">()]</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">;</span></span>
<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">}</span></span></code></pre></div><p>在此示例中，最佳常见类型有一组四个候选类型：<code>Animal</code>、<code>Rhino</code>、<code>Elephant</code>和<code>Snake</code>。其中，<code>Animal</code>可以通过最佳通用类型算法来选择。</p>`,31)])])}const o=i(h,[["render",l]]);export{A as __pageData,o as default};
