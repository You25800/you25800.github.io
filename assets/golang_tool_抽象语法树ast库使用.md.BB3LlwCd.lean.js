import{_ as k,B as n,c as l,o as t,j as i,b3 as p,a,G as D}from"./chunks/framework.CatkIGlB.js";const E=JSON.parse('{"title":"抽象语法树 go/ast 库使用","description":"","frontmatter":{},"headers":[],"relativePath":"golang/tool/抽象语法树ast库使用.md","filePath":"golang/tool/抽象语法树ast库使用.md","lastUpdated":1684585042000}'),F={name:"golang/tool/抽象语法树ast库使用.md"};function e(A,s,r,d,g,B){const h=n("Badge");return t(),l("div",null,[s[3]||(s[3]=i("h1",{id:"抽象语法树-go-ast-库使用",tabindex:"-1"},[a("抽象语法树 go/ast 库使用 "),i("a",{class:"header-anchor",href:"#抽象语法树-go-ast-库使用","aria-label":'Permalink to "抽象语法树 go/ast 库使用"'},"​")],-1)),s[4]||(s[4]=i("h2",{id:"推荐背景",tabindex:"-1"},[a("推荐背景 "),i("a",{class:"header-anchor",href:"#推荐背景","aria-label":'Permalink to "推荐背景"'},"​")],-1)),s[5]||(s[5]=i("p",null,"Go 语言在编译过程中经过词法分析和语法分析之后，就到了抽象语法树的构建阶段，经历这一阶段之后，语句就真正组织成了程序代码。利用抽象语法树解析库，我们可以完成代码的自动化分析和自动化生成，因此通常用于做一些自动化的工具，例如 wire。",-1)),i("p",null,[s[0]||(s[0]=a("这是默认主题内置的 ",-1)),s[1]||(s[1]=i("code",null,"<Badge />",-1)),s[2]||(s[2]=a(" 组件 ",-1)),D(h,{text:"演示"})]),s[6]||(s[6]=p("",35))])}const C=k(F,[["render",e]]);export{E as __pageData,C as default};
