import{_ as a,c as s,o as i,b3 as t}from"./chunks/framework.CatkIGlB.js";const k=JSON.parse('{"title":"PostgreSQL 索引类型","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/index/索引类型.md","filePath":"database/postgreSQL/index/索引类型.md","lastUpdated":1689663255000}'),l={name:"database/postgreSQL/index/索引类型.md"};function p(o,e,r,d,n,h){return i(),s("div",null,[...e[0]||(e[0]=[t(`<h1 id="postgresql-索引类型" tabindex="-1">PostgreSQL 索引类型 <a class="header-anchor" href="#postgresql-索引类型" aria-label="Permalink to &quot;PostgreSQL 索引类型&quot;">​</a></h1><p>本文介绍在 PostgreSQL 中的索引类型以及如何正确的使用它们。</p><p>PostgreSQL 支持几种不同类型的索引：B-tree、Hash、GiST、SP-GiST、GIN 和 BRIN。每种索引类型使用不同的存储结构和算法来应对不同类型的查询。不同的数据可能要采用不同的索引类型。</p><p>PostgreSQL 默认使用 B-tree 索引类型，因为它最适合最常见的查询。 你在使用 <a href="./创建索引.html"><code>CREATE INDEX</code></a> 语句创建索引时，如果不知道索引类型，默认采用 B-tree。</p><h2 id="b-tree-索引" tabindex="-1">B-tree 索引 <a class="header-anchor" href="#b-tree-索引" aria-label="Permalink to &quot;B-tree 索引&quot;">​</a></h2><p>B-tree 是一种自平衡树，它维护已排序的数据。</p><p>每当索引列涉及使用以下运算符之一的比较时，PostgreSQL 查询规划器将考虑使用 B-tree 索引：</p><ul><li><code>&lt;</code></li><li><code>&lt;=</code></li><li><code>=</code></li><li><code>&gt;=</code></li><li><code>BETWEEN</code></li><li><code>IN</code></li><li><code>IS NULL</code></li><li><code>IS NOT NULL</code></li></ul><p>此外， 如果模式是一个常量并且在模式的开头是锚点， 查询规划器可以对涉及模式匹配运算符 <a href="/database/postgreSQL/base/LIKE.html"><code>LIKE</code></a> 和 <code>~</code> 的查询使用 B-tree 索引， 例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">column_name </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">LIKE</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">foo%</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">column_name </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">LIKE</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">bar%</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">column_name  ~ </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">^foo</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span></span></code></pre></div><p>而 <code>col LIKE &#39;%bar&#39;</code> 则不会使用 B-tree 索引。</p><p>对于模式匹配运算符 <code>ILIKE</code> 和 <code>~*</code>，如果模式以以非字母字符(不受大小写影响的字符)开头，查询规划器将考虑使用 B-tree 索引。</p><p>如果您已经开始使用索引来优化 PostgreSQL 数据库，那么 B-tree 可能就是您想要的。</p><h2 id="哈希索引" tabindex="-1">哈希索引 <a class="header-anchor" href="#哈希索引" aria-label="Permalink to &quot;哈希索引&quot;">​</a></h2><p>哈希索引只能处理简单的相等比较 (<code>=</code>)。这意味着每当索引列使用 <code>=</code> 运算符进行比较时，查询计划器将考虑使用哈希索引。</p><p>要创建哈希索引，请在子句中使用 <code>CREATE INDEX</code> 带有 <code>HASH</code> 索引类型的 <code>USING</code> 语句，如下所示：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">CREATE</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> INDEX</span><span style="--shiki-light:#6182B8;--shiki-dark:#82AAFF;"> index_name</span></span>
<span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">ON</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> table_name </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">USING</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> HASH</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> (indexed_column);</span></span></code></pre></div><h2 id="gin-索引" tabindex="-1">GIN 索引 <a class="header-anchor" href="#gin-索引" aria-label="Permalink to &quot;GIN 索引&quot;">​</a></h2><p>GIN 索引是“倒排索引”。它很适合索引那些复杂的值(比如 <a href="/database/postgreSQL/dataType/ARRAY.html"><code>array</code></a>, <a href="/database/postgreSQL/dataType/HSTORE.html"><code>hstore</code></a>, <a href="/database/postgreSQL/dataType/JSON.html"><code>json</code></a> 和 <a href="/database/postgreSQL/dataType/范围.html"><code>range</code></a>)。</p><p>倒排索引中为每一个组成值都包含一个单独的项，它可以高效地处理测试指定组成值是否存在的查询。</p><p>当您将多个值存储在单个列中时，GIN 索引最有用。</p><h2 id="brin-索引" tabindex="-1">BRIN 索引 <a class="header-anchor" href="#brin-索引" aria-label="Permalink to &quot;BRIN 索引&quot;">​</a></h2><p>BRIN 表示块范围索引（Block Range Indexes），存储有关存放在一个表的连续物理块范围上的值摘要信息。BRIN 是 PostgreSQL 9.5 版本新增的索引类型。与 B-tree 索引相比，BRIN 更小，维护成本更低。</p><p>BRIN 允许在非常大的表上使用索引，这在以前使用没有水平分区的 B-tree 是不切实际的。</p><p>BRIN 常用于具有线性排序顺序的列，例如，销售订单表的创建日期列。</p><h2 id="gist-索引" tabindex="-1">GiST 索引 <a class="header-anchor" href="#gist-索引" aria-label="Permalink to &quot;GiST 索引&quot;">​</a></h2><p>GiST 索引不是单独一种索引类型，而是一种架构，可以在这种架构上实现很多不同的索引策略。</p><p>GiST 代表广义搜索树。GiST 索引允许构建通用的树结构。GiST 索引可用于索引几何数据类型和全文搜索。</p><h2 id="sp-gist-索引" tabindex="-1">SP-GiST 索引 <a class="header-anchor" href="#sp-gist-索引" aria-label="Permalink to &quot;SP-GiST 索引&quot;">​</a></h2><p>SP-GiST 代表空间分区的 GiST。SP-GiST 支持分区搜索树，有助于开发各种不同的非平衡数据结构。</p><p>SP-GiST 索引最适用于具有自然聚类元素但也不是均衡树的数据，例如 GIS、多媒体、电话路由和 IP 路由。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>本文介绍了各种 PostgreSQL 索引类型，包括 B-tree、Hash、BRIN、GiST 和 SP-GiST。</p>`,33)])])}const g=a(l,[["render",p]]);export{k as __pageData,g as default};
