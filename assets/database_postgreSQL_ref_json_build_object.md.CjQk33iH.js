import{_ as i,c as a,o as e,b3 as t}from"./chunks/framework.CatkIGlB.js";const r=JSON.parse('{"title":"PostgreSQL json_build_object() 函数","description":"","frontmatter":{},"headers":[],"relativePath":"database/postgreSQL/ref/json_build_object.md","filePath":"database/postgreSQL/ref/json_build_object.md","lastUpdated":1690180891000}'),o={name:"database/postgreSQL/ref/json_build_object.md"};function l(h,s,n,d,p,k){return e(),a("div",null,[...s[0]||(s[0]=[t('<h1 id="postgresql-json-build-object-函数" tabindex="-1">PostgreSQL json_build_object() 函数 <a class="header-anchor" href="#postgresql-json-build-object-函数" aria-label="Permalink to &quot;PostgreSQL json\\_build\\_object() 函数&quot;">​</a></h1><p>PostgreSQL <code>json_build_object()</code> 函数从可变的参数列表（由交替的交替的键和值组成）中创建 JSON 对象并返回。</p><p>此函数与 <a href="./jsonb_build_object.html"><code>jsonb_build_object()</code></a> 函数类似。</p><h2 id="json-build-object-语法" tabindex="-1"><code>json_build_object()</code> 语法 <a class="header-anchor" href="#json-build-object-语法" aria-label="Permalink to &quot;`json_build_object()` 语法&quot;">​</a></h2><p>这是 PostgreSQL <code>json_build_object()</code> 函数的语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">json_build_object(VARIADIC any_value) </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">-&gt;</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;"> JSON</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li><p><em><code>any_value</code></em></p><p>必需的。 是一个可变的参数列表。您可以传入任意类型的任意数量的参数。按照约定，参数由交替的键和值组成。您必须提供偶数个参数。</p></li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><p>PostgreSQL <code>json_build_object()</code> 函数返回一个 JSON 对象，他从由交替的键和值组成的可变的参数列表构建而来。</p><p><code>json_build_object()</code> 函数会评估可变参数列表中的每个参数，其中，作为键的参数被强制转为文本，作为值的参数按照 <a href="./to_json.html"><code>to_json()</code></a> 转为 JSON 值。</p><p>如果可变参数列表中的参数的数量不是偶数， PostgreSQL 会给出一个错误。</p><h2 id="json-build-object-示例" tabindex="-1"><code>json_build_object()</code> 示例 <a class="header-anchor" href="#json-build-object-示例" aria-label="Permalink to &quot;`json_build_object()` 示例&quot;">​</a></h2><p>本示例展示了如何使用 PostgreSQL <code>json_build_object()</code> 函数构建一个 JSON 对象。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">SELECT</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;"> json_build_object(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">1</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, true, </span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">row</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">(</span><span style="--shiki-light:#F76D47;--shiki-dark:#F78C6C;">2</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, </span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&#39;</span><span style="--shiki-light:#90A4AE;--shiki-dark:#BABED8;">, false));</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes material-theme-lighter material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">                 json_build_object</span></span>\n<span class="line"><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">----------------------------------------------------</span></span>\n<span class="line"><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> {</span><span style="--shiki-light:#E2931D;--shiki-dark:#FFCB6B;">&quot;1&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> :</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">a</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;"> &quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">true</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> :</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;"> {</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">f1</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">:2,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">f2</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">b</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">,</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">f3</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">&quot;</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">:</span><span style="--shiki-light:#39ADB5;--shiki-dark:#89DDFF;">false</span><span style="--shiki-light:#91B859;--shiki-dark:#C3E88D;">}}</span></span></code></pre></div><p>这里，我们在函数中使用了 4 个参数: <code>1</code>, <code>&#39;a&#39;</code>, <code>true</code>, <code>row(2, &#39;b&#39;, false)</code>。 其中 <code>1</code> 和 <code>true</code> 为键， <code>&#39;a&#39;</code> 和 <code>row(2, &#39;b&#39;, false)</code> 为值。</p><p>首先，<code>json_build_object()</code> 函数将每个参数转为对应的值：</p><ul><li><code>1</code> 为键，被转为 <code>&quot;1&quot;</code></li><li><code>&#39;a&#39;</code> 为 <code>1</code> 的值，被转为 <code>&quot;a&quot;</code></li><li><code>true</code> 为键，被转为 <code>&quot;true&quot;</code></li><li><code>row(2, &#39;b&#39;, false)</code> 为 <code>true</code> 的值，被转为 <code>{&quot;f1&quot;:2,&quot;f2&quot;:&quot;b&quot;,&quot;f3&quot;:false}}</code></li></ul><p>然后，<code>json_build_object()</code> 函数返回由所有的键值组成的 JSON 对象： <code>{&quot;1&quot; : &quot;a&quot;, &quot;true&quot; : {&quot;f1&quot;:2,&quot;f2&quot;:&quot;b&quot;,&quot;f3&quot;:false}}</code>。</p>',20)])])}const u=i(o,[["render",l]]);export{r as __pageData,u as default};
